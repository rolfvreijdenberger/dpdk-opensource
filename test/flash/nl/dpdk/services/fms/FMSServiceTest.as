package nl.dpdk.services.fms {	import nl.dpdk.services.fms.user.RemoteId;	
	
	import flash.net.NetConnection;		import asunit.framework.TestCase;		import nl.dpdk.services.fms.responder.FMSResponder;	import nl.dpdk.services.fms.rso.FMSSharedObject;	import nl.dpdk.services.fms.rso.FMSSharedObjectData;	import nl.dpdk.services.fms.rso.FMSSharedObjectDataEvent;	import nl.dpdk.services.fms.rso.FMSSharedObjectEvent;	import nl.dpdk.services.fms.user.RemoteIdEvent;			/**	 * TODO, write tests	 */
	public class FMSServiceTest extends TestCase {		protected var instance : FMSService;		private var users : FMSSharedObject;
		private var gateway : String = "rtmp://dpdk.fms35.flashstreaming.eu/opensource";
		/**		 * constructor		 * 		 */		public function FMSServiceTest(testMethod : String = null) {			super(testMethod);			//the flash media server gateway application.			instance = new FMSService(gateway);		}
		/**		 * how can we make sure that this method is called first in the asynchronous handling?		 * is this dependent on the name of the method?		 * Solution: added testMethods.sort(); in TestCase.setTestMethods		 */
		public function testAConnection():void{			trace("FMSServiceTest.testConnection");			//asynchronous test.			instance.addEventListener(FMSEvent.CONNECTED, addAsync(onConnected, 2000));			instance.addEventListener(FMSEvent.ERROR_DISCONNECTED, onDisconnected);			instance.addEventListener(FMSEvent.ERROR_REJECTED, onRejected);			instance.addEventListener(FMSEvent.ERROR_GENERIC, onGenericFMS);			instance.addEventListener(FMSEvent.ERROR_CALL_FAILED, onCallFailed);//			instance.addEventListener(RemoteIdEvent.REMOTE_ID, onRemoteId);				instance.addEventListener(RemoteIdEvent.REMOTE_ID_FAILURE, onRemoteIdFailure);			//now connect			assertFalse('not yet connected', instance.getConnected());//			assertFalse('no remote id yet', instance.getRemoteId().getId());			instance.connect();			}
						public function testGetRemoteId():void{			trace("testGetRemoteId");			assertTrue('we are already connected', instance.getConnected());			assertEquals('gateway can be gotten from the instance', instance.getGateway(), gateway);			assertTrue(instance.getConnection() is NetConnection);				assertTrue(instance.toString() is String);			assertNotSame('we should have a valid remoteId', instance.getRemoteId(), RemoteId.NOT_REMOTE);		}		public function testBUserList() : void {			trace("FMSServiceTest.testUserList()");			//this might normally also be done from inside a subclass of FMSService.			users = new FMSSharedObject('users/users', instance.getConnection());			//normal data handlers			//asynchronous test on the synchronize event of the SharedObject			users.addEventListener(FMSSharedObjectDataEvent.SYNCHED, onUserSynched);			users.addEventListener(FMSSharedObjectDataEvent.NEW, addAsync(onUserNew,2000));			users.addEventListener(FMSSharedObjectDataEvent.CHANGED, onUserChanged);			users.addEventListener(FMSSharedObjectDataEvent.DELETED, onUserDeleted);						//error handlers			users.addEventListener(FMSSharedObjectEvent.ERROR_ASYNC, onUsersAsynch);			users.addEventListener(FMSSharedObjectEvent.ERROR_CONNECT, onUsersConn);			users.addEventListener(FMSSharedObjectEvent.ERROR_NETSTATUS, onUsersNets);			if(!instance.getConnected()) {				fail('not connected yet, so cannot connect to a remote shared object: the order of the test methods are important in this testcase.');				}			users.connect();		}						public function testChangeName():void{			trace('testChangeName');			var responder : FMSResponder = new FMSResponder(addAsync(onNameChanged, 2000), onNameNotChanged);			instance.getConnection().call('setName',responder, "TESTguest + " + instance.getRemoteId().getId());			}				private function onNameNotChanged() : void {			fail('name should be changed');		}		private function onNameChanged(name:String) : void {			trace('onNameChanged');			if(name.indexOf('TEST') == -1){				fail('name not changed, a "TEST" should have been prepended on the fms to the name property');				}		}				public function testDWriteToRSO(): void{			//we're connected			users.addEventListener(FMSSharedObjectDataEvent.WRITE_REJECTED, onWriteRejected);			users.addEventListener(FMSSharedObjectDataEvent.WRITE_SUCCESS, addAsync(onWriteSucces, 1000));			users.write(instance.getRemoteId().getId(), {n: "THE ALPHA AND THE OMEGA", rId: instance.getRemoteId().getId()});		}				private function onWriteSucces(event : FMSSharedObjectDataEvent) : void {			trace("FMSServiceTest.onWriteSucces(event): " + event.getData());			assertEquals(event.getData().getId(), instance.getRemoteId().getId());		}		private function onWriteRejected(event : FMSSharedObjectDataEvent) : void {			trace("FMSServiceTest.onWriteRejected(event): " + event.getData());			fail("we should be able to write to a shared object on our own data property");		}				private function onConnected(e : FMSEvent) : void {			trace('onConnected');
			assertTrue('we are now connected', instance.getConnected());		}				private function onDisconnected(e : FMSEvent) : void {
			fail('could not connect (IS THE SERVER RUNNING, is the script error free? check the debug console from fms): ' + e.getMessage());		}		private function onRejected(event:FMSEvent):void 		{			fail('the server rejected our connection: ' + event.getMessage());
		}		private function onRemoteIdFailure(event : RemoteIdEvent) : void {			fail('could not get remoteId');		}		private function onCallFailed(e : FMSEvent) : void {			fail('call failed: ' + e.getMessage());		}				private function onGenericFMS(e : FMSEvent) : void {			//further processing needed			fail('unexpected generic message: ' + e.getMessage());		}
		private function onUsersNets(event : FMSSharedObjectEvent) : void {			trace("FMSServiceTest.onUsersNets(event)");			fail('netstatus error on users');		}
		
		private function onUsersConn(event : FMSSharedObjectEvent) : void {			trace("FMSServiceTest.onUsersConn(event)");			fail('connection failure on users');		}
		
		private function onUsersAsynch(event : FMSSharedObjectEvent) : void {			trace("FMSServiceTest.onUsersAsynch(event)");			fail('asynchronous failure on users');		}
		

		private function onUserDeleted(event : FMSSharedObjectDataEvent) : void {		}
		
		private function onUserChanged(event : FMSSharedObjectDataEvent) : void {			var data: FMSSharedObjectData = event.getData() as FMSSharedObjectData;			trace("data: name: " + data.getData().n);			if(data.getData().n.indexOf('TEST') == -1){				fail('name not changed, a "TEST" should have been prepended on the fms to the name property');				}		}				private function onUserNew(event : FMSSharedObjectDataEvent) : void {			assertTrue(event.getData() is FMSSharedObjectData);				}
		
		private function onUserSynched(event : FMSSharedObjectDataEvent) : void {			assertTrue('we are synched', users.getReadyAfterSynchronization());		}
		
		public override function toString() : String {			return "FMSServiceTest";			}	}}