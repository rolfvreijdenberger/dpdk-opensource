package nl.dpdk.specifications {	import asunit.framework.TestCase;			public class SpecificationTests extends TestCase {		private var instance : ISpecification;		/**		 * constructor		 */		public function SpecificationTests(testMethod : String = null) {			super(testMethod);			trace("SpecificationTests.SpecificationTests(testMethod)");		}				/**		 * this method sets up all stuff we need before we run the test		 */		protected override function setUp() : void {			instance = new Specification();		}				/**		 *	use to remove all stuff not needed after this test		 */		protected override function tearDown() : void {			instance = null;		}				/**		 *	a test implementation		 */		public function testInstantiated() : void {			assertTrue("ISpecification instantiated", instance is ISpecification);		}				public function testAbstractSpecification() : void {			trace("SpecificationTests.testAbstractSpecification()");			instance = new Specification();			try {				instance.isSatisfiedBy(new Object());				fail('abstract cannot be instantiated');			}catch(e : Error) {			}												instance = instance.not();			try {				instance.isSatisfiedBy(new Object());				fail('abstract cannot be instantiated');			}catch(e : Error) {			}						instance.and(new Specification());			try {				instance.isSatisfiedBy(new Object());				fail('abstract cannot be instantiated');			}catch(e : Error) {			}						instance.or(new Specification());			try {				instance.isSatisfiedBy(new Object());				fail('abstract cannot be instantiated');			}catch(e : Error) {			}											}				public function testAndSpecification() : void {			trace("SpecificationTests.testAndSpecification()");			var a : ISpecification = new BooleanSpecification(true);			var b : ISpecification = new BooleanSpecification(false);			instance = new AndSpecification(a, b);			assertFalse(instance.isSatisfiedBy(new Object()));			assertTrue(!instance.isSatisfiedBy(new Object()));		}				public function testOrSpecification() : void {			trace("SpecificationTests.testOrSpecification()");			var a : ISpecification = new BooleanSpecification(true);			var b : ISpecification = new BooleanSpecification(false);			instance = new OrSpecification(a, b);			assertTrue(instance.isSatisfiedBy(new Object()));						instance = new OrSpecification(a, a);			assertTrue(instance.isSatisfiedBy(new Object()));						instance = new OrSpecification(b, b);			assertFalse(instance.isSatisfiedBy(new Object()));		}						public function testCompositeSpecification() : void {			trace("SpecificationTests.testCompositeSpecification()");			var a : ISpecification = new BooleanSpecification(true);			var b : ISpecification = new BooleanSpecification(false);			var composite: CompositeSpecification = new CompositeSpecification();						composite.add(a);			composite.add(b);			assertFalse(composite.isSatisfiedBy(null));			composite.remove(a);			assertFalse(composite.isSatisfiedBy(null));			composite.remove(b);			//defaults to true			assertTrue(composite.isSatisfiedBy(null));									composite.add(a);			composite.add(b);			assertFalse(composite.isSatisfiedBy(null));			composite.remove(b);			assertTrue(composite.isSatisfiedBy(null));			composite.remove(a);			assertTrue(composite.isSatisfiedBy(null));						composite.add(b);			composite.add(b);			composite.add(a);			composite.add(b);						assertFalse(composite.isSatisfiedBy(null));			composite.remove(b);			assertFalse(composite.isSatisfiedBy(null));			composite.remove(b);			assertFalse(composite.isSatisfiedBy(null));			composite.remove(b);			//only 'a' left			assertTrue(composite.isSatisfiedBy(null));						composite.add(b);			composite.add(b);			composite.add(a);			composite.add(b);			assertFalse(composite.isSatisfiedBy(null));			while(composite.remove(b));			assertTrue(composite.isSatisfiedBy(null));					}				public function testBooleanSpecification() : void {			trace("SpecificationTests.testBooleanSpecification()");						//always true			instance = new BooleanSpecification(true);			assertTrue(instance.isSatisfiedBy('bogus'));			assertTrue(instance.isSatisfiedBy(null));			assertTrue(instance.isSatisfiedBy(1));			assertTrue(instance.isSatisfiedBy(new Object()));			assertTrue(instance.isSatisfiedBy(false));									//always false			instance = new BooleanSpecification(false);			assertFalse(instance.isSatisfiedBy('bogus'));			assertFalse(instance.isSatisfiedBy(null));			assertFalse(instance.isSatisfiedBy(1));			assertFalse(instance.isSatisfiedBy(new Object()));			assertFalse(instance.isSatisfiedBy(false));						//link with or (false or true is true)			instance = instance.or(new BooleanSpecification(true));			assertTrue(instance.isSatisfiedBy('bogus'));			assertTrue(instance.isSatisfiedBy(null));			assertTrue(instance.isSatisfiedBy(1));			assertTrue(instance.isSatisfiedBy(new Object()));			assertTrue(instance.isSatisfiedBy(false));									//link true and false is false			instance = new BooleanSpecification(true);			instance = instance.and(new BooleanSpecification(false));			assertFalse(instance.isSatisfiedBy('bogus'));			assertFalse(instance.isSatisfiedBy(null));			assertFalse(instance.isSatisfiedBy(1));			assertFalse(instance.isSatisfiedBy(new Object()));			assertFalse(instance.isSatisfiedBy(false));						//linking of multiple methods. add true/false OR true is always true			instance = instance.or(new BooleanSpecification(true));			assertTrue(instance.isSatisfiedBy('bogus'));			assertTrue(instance.isSatisfiedBy(null));			assertTrue(instance.isSatisfiedBy(1));			assertTrue(instance.isSatisfiedBy(new Object()));			assertTrue(instance.isSatisfiedBy(false));					}				public function testChainedSpecification() : void {			trace("SpecificationTests.testChainedSpecification()");						//chained, like or / and / not			var a : ISpecification = new BooleanSpecification(true);			var b : ISpecification = new BooleanSpecification(false);						assertTrue(a.or(b).isSatisfiedBy(null));			assertFalse(a.and(b).isSatisfiedBy(null));			assertTrue(a.and(b).or(a).isSatisfiedBy(null));			assertFalse(a.or(b).and(b).isSatisfiedBy(null));		}	}}