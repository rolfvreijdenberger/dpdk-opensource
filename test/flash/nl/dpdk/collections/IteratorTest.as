package nl.dpdk.collections {	import nl.dpdk.collections.iteration.ArrayIterator;	import nl.dpdk.collections.iteration.NullIterator;	import nl.dpdk.collections.iteration.UnmodifiableExtendedIterator;	import nl.dpdk.collections.iteration.UnmodifiableIterator;	import nl.dpdk.collections.lists.ArrayList;	import nl.dpdk.collections.lists.List;	public class IteratorTest extends CollectionTest 	{		/**		 * constructor		 */		public function IteratorTest(testMethod:String = null) 		{			super(testMethod);		}				public function testArrayIterator():void 		{			trace("IteratorTest.testArrayIterator()");			var a:Array = new Array();			var b:Array = new Array();			for(var i:int = 0;i < alphabet.length;++i) 			{				a.push(alphabet.charAt(i));				b.push(alphabet.charAt(i));			}			//trace(a);			var instance:ArrayIterator = new ArrayIterator(a);			assertTrue(instance.hasNext());						var count:int = 0;			while(instance.hasNext()) 			{				assertEquals('iterator at count: ' + count, instance.next(), alphabet.charAt(count));				count++;					}			assertEquals(count, 26);						instance = new ArrayIterator(a);			assertTrue(instance.hasNext());			assertEquals('instance.next is a', instance.next(), "a");			assertEquals('instance.next is b', instance.next(), "b");			assertTrue('remove b go to a', instance.remove());			assertEquals('instance.next is c', instance.next(), "c");			//trace(a);			assertTrue('remove c, go to a', instance.remove());			//trace(a);			assertTrue('remove a, go to d', instance.remove());			//trace(a);			assertTrue('remove d, go to e', instance.remove());			//trace(a);			assertEquals('instance.next is f', instance.next(), "f");							//trace(a);			instance = new ArrayIterator(b);			instance.end();			assertTrue('at the end we have a previous', instance.hasPrevious());			assertFalse('at the end we have no next', instance.hasNext());			assertEquals('first previous is z', instance.previous(), 'z');			assertFalse('pointing to last element there is no next', instance.hasNext());			assertEquals('y', instance.previous(), 'y');			assertTrue('next should be z', instance.hasNext());			assertEquals('z', instance.next(), 'z');						assertNull('next at end', instance.next());			assertFalse('cannot remove when out of bounds', instance.remove());			while(instance.hasPrevious()) 			{				instance.previous();				}			assertEquals(instance.next(), 'b');			assertEquals(instance.previous(), 'a');						assertNull('previous at end', instance.previous());			assertFalse('cannot remove when out of bounds', instance.remove());			while(instance.hasNext()) 			{				instance.next();				}			assertEquals(instance.previous(), 'y');			assertEquals(instance.next(), 'z');			assertTrue('overwrite z with zz', instance.set('zz'));			instance.previous();			assertEquals('zz is set instead of z', instance.next(), 'zz');			instance.insert('zzz');			trace(b);			assertEquals('inserted before zz is zzz', instance.previous(), 'zzz');			assertEquals('zzz is set before zz', instance.next(), 'zz');			assertNull('out of bounds', instance.next());			assertFalse('set out of bounds', instance.set('zzzzz'));			instance.begin();			assertNull('out of bounds', instance.previous());			assertFalse('set out of bounds', instance.set('zzzzz'));						/**			 * test on an empty array			 */			var c:Array = new Array();			instance = new ArrayIterator(c);			assertFalse(instance.remove());			assertFalse(instance.hasNext());			assertFalse(instance.remove());			assertFalse(instance.hasPrevious());			assertFalse(instance.remove());			assertNull('no next on empty list', instance.next());			assertNull('no prev on empty list', instance.previous());			assertFalse(instance.remove());						instance.insert('a');			trace(c);			assertEquals(instance.previous(), 'a');		}				public function testNullIterator():void 		{			trace("IteratorTest.testNullIterator()");			var instance:NullIterator = new NullIterator();			assertFalse(instance.set("a"));			assertFalse(instance.hasNext());			assertFalse(instance.remove());			assertFalse(instance.hasPrevious());			assertFalse(instance.remove());			assertFalse(instance.hasNext());			assertFalse(instance.remove());			assertNull(instance.next());			assertFalse(instance.remove());			assertNull(instance.previous());			assertFalse(instance.remove());			instance.begin();			assertFalse(instance.hasNext());			assertFalse(instance.hasPrevious());			assertFalse(instance.remove());			assertNull(instance.next());			assertFalse(instance.remove());						instance.end();			assertFalse(instance.hasNext());			assertFalse(instance.hasPrevious());			assertFalse(instance.remove());			assertNull(instance.previous());			assertFalse(instance.remove());					}				public function testUnmodifiableIterator():void 		{			trace("IteratorTest.testUnmodifiableIterator()");			var collection:List = new ArrayList();			collection.add('a');			collection.add('b');			var instance:UnmodifiableIterator = new UnmodifiableIterator(collection.iterator());			assertTrue('has next', instance.hasNext());			assertFalse('cant remove', instance.remove());						assertNotNull('not null', instance.next());			assertFalse('cant remove', instance.remove());			assertNotNull('not null', instance.next());			assertFalse('cant remove', instance.remove());			assertNotNull('not null', instance.next());					assertEquals(collection.size(), 2);				}						public function testUnmodifiableExtendedIterator():void 		{			trace("IteratorTest.testUnmodifiableExtendedIterator()");			var collection:List = new ArrayList();			collection.add('a');			collection.add('b');			var instance:UnmodifiableExtendedIterator = new UnmodifiableExtendedIterator(collection.iteratorExtended());			assertFalse('cant set', instance.set("a"));			assertTrue('has next', instance.hasNext());			assertFalse('cant removee', instance.remove());						assertFalse('no remove', instance.remove());			assertTrue('has next', instance.hasNext());			assertFalse('cant remove', instance.remove());			assertNotNull('not null', instance.next());			assertFalse('cant remove', instance.remove());			assertFalse('cant remove', instance.remove());					instance.begin();			assertTrue('has next', instance.hasNext());			assertTrue('has prev', instance.hasPrevious());			assertFalse('dont remove', instance.remove());			assertNotNull('not null', instance.next());			assertFalse('cant remove', instance.remove());						instance.end();			assertTrue(instance.hasNext());			assertTrue(instance.hasPrevious());			assertFalse(instance.remove());			assertNotNull(instance.previous());			assertFalse(instance.remove());				instance.insert('c');			assertEquals(collection.size(), 2);				}	}}