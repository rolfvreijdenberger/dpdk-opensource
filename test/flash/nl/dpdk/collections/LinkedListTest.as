package nl.dpdk.collections {	import nl.dpdk.collections.iteration.IIterator;	import nl.dpdk.collections.lists.LinkedList;	import nl.dpdk.collections.lists.List;	import nl.dpdk.collections.sorting.Comparators;	import nl.dpdk.collections.sorting.SortTypes;	public class LinkedListTest extends ListTest {		/**		 * constructor		 */		public function LinkedListTest(testMethod : String = null) {			super(testMethod);			trace("LinkedListTest.LinkedListTest(testMethod)");		}
		
		protected override function getConcreteList() : List {			return  new LinkedList();		}
		
		/**		 * List		 */		public function testListaddAll() : void {			trace("LinkedListTest.testListaddAll()");						var test : List = new LinkedList();			test.add('d');			test.add('e');			test.add('f');			instance = new LinkedList(test);			assertEquals("after first addition", instance.toArray().toString(), 'd,e,f');						instance.add('a');			instance.add('b');			instance.add('c');			instance.add('g');			instance.add('h');			instance.add('i');			assertEquals("after additions first addition", instance.toArray().toString(), 'd,e,f,a,b,c,g,h,i');			instance.addAll(test);			//trace(instance.toArray());			assertEquals("after additions and addAll addition", instance.toArray().toString(), 'd,e,f,a,b,c,g,h,i,d,e,f');												instance.clear();			instance.add('a');			instance.add('b');			instance.add('c');			instance.addAll(test);			assertEquals("addition", instance.toArray().toString(), 'a,b,c,d,e,f');									instance.clear();			instance.addAll(test);			assertEquals("addition  on empty list", instance.toArray().toString(), 'd,e,f');		}
		
		/**		 * List		 */		public function testListSort() : void {			trace("LinkedListTest.testListSort()");			var func : Function = Comparators.compareStringCaseInsensitive;			doSort(func, SortTypes.BUBBLE, LIST_EMPTY, "bubble sort empty list");					doSort(func, SortTypes.BUBBLE, LIST_ONE_ELEMENT, "bubble sort one element");					doSort(func, SortTypes.BUBBLE, LIST_ODD, "bubble sort odd");					doSort(func, SortTypes.BUBBLE, LIST_EVEN, "bubble sort even");					doSort(func, SortTypes.BUBBLE, LIST_ALMOST_SORTED_ELEMENTS, "bubble sort almost sorted");					doSort(func, SortTypes.BUBBLE, LIST_SORTED_ELEMENTS, "bubble sort sorted");					doSort(func, SortTypes.BUBBLE, LIST_DUPLICATE, "bubble sort duplicate");					doSort(func, SortTypes.BUBBLE, LIST_UNSORTED, "bubble sort unsorted");					doSort(func, SortTypes.BUBBLE, LIST_LARGE, "bubble sort large");					doSort(func, SortTypes.BUBBLE, LIST_LARGE_KEYS, "bubble sort large keys");					doSort(Comparators.compareIntegers, SortTypes.BUBBLE, LIST_LARGE_SORTED, "bubble sort large sorted");								doSort(func, SortTypes.INSERTION, LIST_EMPTY, "insertion sort empty list");					doSort(func, SortTypes.INSERTION, LIST_ONE_ELEMENT, "insertion sort one element");					doSort(func, SortTypes.INSERTION, LIST_ODD, "insertion sort odd");					doSort(func, SortTypes.INSERTION, LIST_EVEN, "insertion sort even");					doSort(func, SortTypes.INSERTION, LIST_ALMOST_SORTED_ELEMENTS, "insertion sort almost sorted");					doSort(func, SortTypes.INSERTION, LIST_SORTED_ELEMENTS, "insertion sort sorted");					doSort(func, SortTypes.INSERTION, LIST_DUPLICATE, "insertion sort duplicate");					doSort(func, SortTypes.INSERTION, LIST_UNSORTED, "insertion sort unsorted");					doSort(func, SortTypes.INSERTION, LIST_LARGE, "insertion sort large");					doSort(func, SortTypes.INSERTION, LIST_LARGE_KEYS, "insertion sort large keys");					doSort(Comparators.compareIntegers, SortTypes.INSERTION, LIST_LARGE_SORTED, "insertion sort large sorted");								doSort(func, SortTypes.SELECTION, LIST_EMPTY, "selection sort empty list");					doSort(func, SortTypes.SELECTION, LIST_ONE_ELEMENT, "selection sort one element");					doSort(func, SortTypes.SELECTION, LIST_ODD, "selection sort odd");					doSort(func, SortTypes.SELECTION, LIST_EVEN, "selection sort even");					doSort(func, SortTypes.SELECTION, LIST_ALMOST_SORTED_ELEMENTS, "selection sort almost sorted");					doSort(func, SortTypes.SELECTION, LIST_SORTED_ELEMENTS, "selection sort sorted");					doSort(func, SortTypes.SELECTION, LIST_DUPLICATE, "selection sort duplicate");					doSort(func, SortTypes.SELECTION, LIST_UNSORTED, "selection sort unsorted");					doSort(func, SortTypes.SELECTION, LIST_LARGE, "selection sort large");					doSort(func, SortTypes.SELECTION, LIST_LARGE_KEYS, "selection sort large keys");					doSort(Comparators.compareIntegers, SortTypes.SELECTION, LIST_LARGE_SORTED, "selection sort large sorted");											doSort(func, SortTypes.MERGE, LIST_EMPTY, "merge sort empty list");					doSort(func, SortTypes.MERGE, LIST_ONE_ELEMENT, "merge sort one element");					doSort(func, SortTypes.MERGE, LIST_ODD, "merge sort odd");				trace(instance.toArray().toString());				doSort(func, SortTypes.MERGE, LIST_EVEN, "merge sort even");				trace(instance.toArray().toString());				doSort(func, SortTypes.MERGE, LIST_ALMOST_SORTED_ELEMENTS, "merge sort almost sorted");					doSort(func, SortTypes.MERGE, LIST_SORTED_ELEMENTS, "merge sort sorted");					doSort(func, SortTypes.MERGE, LIST_DUPLICATE, "merge sort duplicate");					doSort(func, SortTypes.MERGE, LIST_UNSORTED, "merge sort unsorted");					doSort(func, SortTypes.MERGE, LIST_LARGE, "merge sort large");					doSort(func, SortTypes.MERGE, LIST_LARGE_KEYS, "merge sort large keys");					doSort(Comparators.compareIntegers, SortTypes.SELECTION, LIST_LARGE_SORTED, "merge sort large sorted");				}
		
		/**		 * List		 */		public function testConstructor() : void {			trace("LinkedListTest.testConstructor()");			var test : LinkedList = new LinkedList();			test.add('a');			test.add('b');			test.add('c');			instance = new LinkedList(test);				assertEquals(instance.toArray().toString(), 'a,b,c');			instance.add('d');			assertEquals(instance.toArray().toString(), 'a,b,c,d');		}
		
		/**		 *	a test implementation		 */		public override function testInstantiated() : void {			assertTrue("LinkedList instantiated", instance is LinkedList);		}						/**		 *	iteration test		 */		public function testIteration() : void {			trace("LinkedListTest.testIteration()");						instance = new LinkedList();			assertTrue('instance is linkedlist', instance is LinkedList);						instance.add('a');			assertEquals('instance contains 1 item', instance.size(), 1);			assertEquals('instance contains "a"', instance.toArray().toString(), 'a');						var iterator:IIterator = instance.iterator();						assertTrue('iterator has next', iterator.hasNext());						var testData:String = iterator.next();						assertEquals('testData is "a"', testData, 'a');			assertFalse('iterator does not have next', iterator.hasNext());		}	}}