package nl.dpdk.collections 
{	import asunit.framework.TestCase;
	
	import nl.dpdk.collections.core.ICollection;
	import nl.dpdk.collections.lists.ArrayList;
	import nl.dpdk.collections.lists.List;
	import nl.dpdk.collections.lists.LinkedList;
	import nl.dpdk.collections.sets.ResultRow;
	import nl.dpdk.collections.sets.ResultSet;	

	public class ResultSetTest extends TestCase {		private var instance : ResultSet;		/**		 * constructor		 */		public function ResultSetTest(testMethod : String = null) {			super(testMethod);			trace("ResultSetTest.ResultSetTest(testMethod)");		}				/**		 * this method sets up all stuff we need before we run the test		 */		protected override function setUp() : void {			instance = new ResultSet(new LinkedList());			//setup with id 1			var row: ResultRow = new ResultRow();			//assertEquals(row.getId(), 0);		}				/**		 *	use to remove all stuff not needed after this test		 */		protected override function tearDown() : void {			instance = null;		}				/**		 *	a test implementation		 */		public function testInstantiated() : void {			assertTrue("ResultSet instantiated", instance is ResultSet);		}				public function testConstructorAndColumnGetter() : void {			trace("ResultSetTest.testConstructorAndColumnGetter()");			var columns : List;			var rows : List;			var i : int;			var row : ResultRow;						/**			 * check the normal constructor			 */			columns = new LinkedList();			columns.add('normal');			columns.add('multiplication');			columns.add('divided');			columns.add('modulo');			rows = new ArrayList();			for(i = 0;i < 10;i++) {				row = new ResultRow();				row.normal = i;				row.multiplication = i * 2;				row.divided = i / 2;				row.modulo = i % 2;				rows.add(row);			}			instance = new ResultSet(columns, rows);			instance.setCheckRowsForValidity(true);			assertEquals(instance.getColumns().size(), 4);			assertEquals(instance.getRows().size(), 10);						/**			 * check column getters			 */
			 //"normal"			 var list:ICollection = instance.getColumnAt(0);
			 assertEquals(list.size(), 10);
			 assertTrue(list.contains(0));
			 assertTrue(list.contains(9));
			 assertFalse(list.contains(10));
			 
			 
			 
			 list = instance.getColumnAt(-1);
			 assertTrue(list.isEmpty());
			 list = instance.getColumnAt(4);
			 assertTrue(list.isEmpty());
			 
			 list = instance.getColumnByName('multiplica');
			 assertTrue(list.isEmpty());
			 
			 list = instance.getColumnByName('multiplication');
			 assertFalse(list.isEmpty());
			 assertEquals(list.size(), 10);
			 assertTrue(list.contains(0));
			 assertTrue(list.contains(10));
			 assertTrue(list.contains(18));
			 assertFalse(list.contains(20));
			 
			 
			 
			 											/**			 * check the ROW_CHECK property on resultset			 */			columns = new LinkedList();			columns.add('normal');			columns.add('multiplication');			columns.add('divided');			columns.add('modulo');			rows = new ArrayList();			for(i = 0;i < 10;i++) {				row = new ResultRow();				//don't set the normal property				//row.normal = i;				row.multiplication = i * 2;				row.divided = i / 2;				row.modulo = i % 2;								rows.add(row);			}			try {				instance = new ResultSet(columns, rows);				fail('we do not have the right number of properties on the row object');			}catch(e : Error) {				trace("expected error: " + e.message);			}						instance.setCheckRowsForValidity(false);					}				public function testAdd() : void {			trace("ResultSetTest.testAdd()");							var list : List;			var row : ResultRow;			/**			 * test with no columns			 */			instance = new ResultSet(new LinkedList());			try {				instance.add(new ResultRow());			}catch(e : Error) {				fail('empty row' + e.message);				}			row = new ResultRow();			row.a = 'test';			try {				instance.add(row);			}catch(e : Error) {				fail('no row check' + e.message);				}			instance.setCheckRowsForValidity(true);			try {				instance.add(row);			}catch(e : Error) {				fail('with row check' + e.message);				}									/**			 * now test with wrong resultrows			 */			list = new LinkedList();			list.add('a');						instance = new ResultSet(list);			instance.setCheckRowsForValidity(false);			try {				instance.add(new ResultRow());			}catch(e : Error) {				fail('empty row' + e.message);				}			row = new ResultRow();			row.a = 'test';			try {				instance.add(row);			}catch(e : Error) {				fail('no row check' + e.message);				}			instance.setCheckRowsForValidity(true);			try {				instance.add(new ResultRow());			}catch(e : Error) {				trace('expected: ' + e.message);				}						//now with row checks			list = new LinkedList();			list.add('a');						instance = new ResultSet(list);			instance.setCheckRowsForValidity(true);			try {				instance.add(new ResultRow());				fail('empty row');				}catch(e : Error) {				trace('expected: ' + e.message);			}			row = new ResultRow();			row.a = 'test';			try {				instance.add(row);			}catch(e : Error) {				fail(e.message);			}			try {				instance.add(row);			}catch(e : Error) {				fail('with row check ' + e.message);				}		}				public function testResultRow() : void {			trace("ResultSetTest.testResultRow()");			var row: ResultRow = new ResultRow();			assertFalse('has no prop a', row.hasOwnProperty('a'));			row.a = 'test';			assertFalse('has no prop __id, itis private', row.hasOwnProperty('__id'));			assertTrue('has prop ', row.hasOwnProperty('getId'));			assertTrue('now has prop a dynamically allocated', row.hasOwnProperty('a'));			assertNotNull('not null, returns a number', row.getId());			assertTrue(row.getId() is Number);			assertTrue(row.getId() is int);			assertTrue(row.getId() is uint);			assertFalse('not a string', row.getId() is String);			assertTrue('id is an object', row.getId() is Object);					}						public function testGetRowAt():void{			trace("ResultSetTest.testGetRowAt()");			var list: List = new LinkedList();			list.add('a');			list.add('b');			instance = new ResultSet(list);			var a: ResultRow = new ResultRow();			a.id = 'a';			var b: ResultRow = new ResultRow();			b.id = 'b';			var c: ResultRow = new ResultRow();			c.id = 'c';			instance.add(a);			instance.add(b);			instance.add(c);			assertEquals(instance.getRowAt(0).id, 'a');			assertEquals(instance.getRowAt(1).id, 'b');			assertEquals(instance.getRowAt(2).id, 'c');									}						/**		 * simple testing of delegated methods inside ResultSet and other simple api stuff which is tested elsewhere in the collections testsuite		 */		public function testSimpleStuff():void{						instance = new ResultSet(new LinkedList());			assertEquals(instance.size(), 0);			assertEquals(instance.getColumns().size(), 0);			assertTrue(instance.isEmpty());			assertTrue(instance.getColumns().isEmpty());				assertNull(instance.getRowAt(0));			assertNull(instance.getRowAt(-1));			assertNull(instance.getRowAt(1));			instance.setCheckRowsForValidity(false);			var list: List = new LinkedList();			list.add('a');			list.add('b');			list.add('c');			instance = new ResultSet(list);			assertTrue(instance.isEmpty());			var row: ResultRow = new ResultRow();			row.a = 'a';			instance.add(row);			instance.add(new ResultRow());			assertTrue(instance.contains(row));			assertFalse(instance.contains(new ResultRow()));			assertTrue(instance.remove(row));			assertFalse(instance.contains(row));			assertEquals(instance.size(), 1);			assertFalse(instance.isEmpty());			instance.clear();			assertTrue(instance.isEmpty());			assertEquals(instance.size(), 0);			assertFalse(instance.getColumns().isEmpty());						trace(instance.toString());		}	}}