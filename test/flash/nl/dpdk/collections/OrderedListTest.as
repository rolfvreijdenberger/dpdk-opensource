package nl.dpdk.collections {	import nl.dpdk.collections.lists.List;
	import nl.dpdk.collections.lists.LinkedList;
	import nl.dpdk.collections.lists.OrderedList;
	import nl.dpdk.collections.sorting.Comparators;
	import nl.dpdk.collections.sorting.SortTypes;
	import nl.dpdk.utils.Filter;		
	public class OrderedListTest extends CollectionTest {		private var instance : OrderedList;
		/**		 * constructor		 */		public function OrderedListTest(testMethod : String = null) {			super(testMethod);		}
		
		/**		 * this method sets up all stuff we need before we run the test		 */		protected override function setUp() : void {			instance = new OrderedList(Comparators.compareStringCaseInsensitive);		}
		
		public function testBogus() : void {			trace("OrderedListTest.testBogus()");			//then we do this...			//assertFalse(true);			//hallo 		}
		
		/**		 *	use to remove all stuff not needed after this test		 */		protected override function tearDown() : void {			instance = null;		}
		
		public function testConstructorAddRemoveResort() : void {			trace("OrderedListTest.testConstructorAddRemoveResort()");			var list : List = new LinkedList();			list.add('c');			list.add('e');			list.add('d');			list.add('a');			list.add('b');			instance = new OrderedList(Comparators.compareStringCaseInsensitive, list);			assertEquals(instance.toArray().toString(), 'a,b,c,d,e');				instance.add('j');			instance.add('i');			assertEquals(instance.toArray().toString(), 'a,b,c,d,e,i,j');				instance.add('h');			instance.add('f');			instance.add('g');			assertEquals(instance.toArray().toString(), 'a,b,c,d,e,f,g,h,i,j');				instance.remove('a');			instance.remove('j');			instance.remove('d');			assertEquals(instance.toArray().toString(), 'b,c,e,f,g,h,i');				//re-sort			instance.sort(Comparators.compareStringCaseInsensitiveDescending);			assertEquals(instance.toArray().toString(), 'i,h,g,f,e,c,b');			instance.insertAt(2, 'x');				instance.insertAt(2, 'd');				instance.insertAt(2, 'a');				assertEquals(instance.toArray().toString(), 'x,i,h,g,f,e,d,c,b,a');		}
		
		public function testTheRest() : void {			trace("OrderedListTest.testTheRest()");			assertTrue('at present OrderedList uses an ArrayList. testing is already done there', true);				assertTrue('the methods we changed in OrderedList are trivial changes and need not be tested, as they all resolve internally to "add()"', true);			}
		
		public function testSearch() : void {			trace("OrderedListTest.testSearch()");			instance.clear();			trace('instancec cleared');			for(var i : int = 0;i < alphabetLength;++i) {				for(var j : int = 0;j < 10;++j) {					instance.add(alphabet.charAt(i) + j);					}			}					assertNull('adding null', instance.add(null));			trace('alphabet ordered stuff: ' + instance.toArray().toString());				assertEquals(instance.search('a0'), 'a0');			assertEquals(instance.search('a10'), null);			assertEquals(instance.search('z9'), 'z9');			assertEquals(instance.search('g3'), 'g3');			assertEquals(instance.search('l2'), 'l2');			assertEquals(instance.search('q8'), 'q8');			assertEquals(instance.search('d5'), 'd5');			//merge is better, as we have a sorted thinggie here..			trace('pre sort');			instance.sort(Comparators.compareStringCaseInsensitiveDescending, SortTypes.MERGE);			trace('alphabet ordered stuff reversed: ' + instance.toArray().toString());				assertEquals(instance.search('a0'), 'a0');			assertEquals(instance.search('g3'), 'g3');			assertEquals(instance.search('l2'), 'l2');			assertEquals(instance.search('q8'), 'q8');			assertEquals('searchinf for nonexistent', instance.search('a10'), null);			assertEquals('search for null', instance.search(null), null);			assertEquals(instance.search('z9'), 'z9');			assertEquals(instance.search('d5'), 'd5');			/**			 * the count of iterations INSIDE the search method has been tested by tracing out the count.			 * for the above 260 items, searching took at most 9 probes.			 */			 			//removal			assertTrue(instance.remove('d5'));			assertTrue(instance.remove('z9'));			assertTrue(instance.remove('a3'));			assertFalse('remove null', instance.remove(null));			assertFalse(instance.remove('aqw'));			assertFalse(instance.remove(0));			 			//contains			assertTrue(instance.contains('a2'));			assertTrue(instance.contains('d3'));			assertTrue(instance.contains('x5'));			assertFalse(instance.contains('a3'));			assertFalse(instance.contains('d5'));			assertFalse(instance.contains('z9'));		}				public function testReverse():void		{			instance.add("a");			instance.add("b");						assertEquals('instance is sorted a-b', instance.toArray().toString(), "a,b");						instance.reverse();						assertEquals('instance is reversed, sorted b-a', instance.toArray().toString(), "b,a");						instance.reverse();						assertEquals('instance is sorted a-b again', instance.toArray().toString(), "a,b");						instance.clear();						for(var i : int = 0;i < alphabetLength;++i) {				for(var j : int = 0;j < 10;++j) {					instance.add(alphabet.charAt(i) + j);					}			}						assertEquals('instance is sorted right, a0-z9', instance.toArray().toString(), "a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,g0,g1,g2,g3,g4,g5,g6,g7,g8,g9,h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,j0,j1,j2,j3,j4,j5,j6,j7,j8,j9,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,z0,z1,z2,z3,z4,z5,z6,z7,z8,z9");						assertNull('adding null', instance.add(null));			trace('alphabet ordered stuff: ' + instance.toArray().toString());				assertEquals(instance.search('a0'), 'a0');			assertEquals(instance.search('a10'), null);			assertEquals(instance.search('z9'), 'z9');			assertEquals(instance.search('g3'), 'g3');			assertEquals(instance.search('l2'), 'l2');			assertEquals(instance.search('q8'), 'q8');			assertEquals(instance.search('d5'), 'd5');						instance.reverse();			assertEquals('instance is reversed, z9-a0', instance.toArray().toString(), "z9,z8,z7,z6,z5,z4,z3,z2,z1,z0,y9,y8,y7,y6,y5,y4,y3,y2,y1,y0,x9,x8,x7,x6,x5,x4,x3,x2,x1,x0,w9,w8,w7,w6,w5,w4,w3,w2,w1,w0,v9,v8,v7,v6,v5,v4,v3,v2,v1,v0,u9,u8,u7,u6,u5,u4,u3,u2,u1,u0,t9,t8,t7,t6,t5,t4,t3,t2,t1,t0,s9,s8,s7,s6,s5,s4,s3,s2,s1,s0,r9,r8,r7,r6,r5,r4,r3,r2,r1,r0,q9,q8,q7,q6,q5,q4,q3,q2,q1,q0,p9,p8,p7,p6,p5,p4,p3,p2,p1,p0,o9,o8,o7,o6,o5,o4,o3,o2,o1,o0,n9,n8,n7,n6,n5,n4,n3,n2,n1,n0,m9,m8,m7,m6,m5,m4,m3,m2,m1,m0,l9,l8,l7,l6,l5,l4,l3,l2,l1,l0,k9,k8,k7,k6,k5,k4,k3,k2,k1,k0,j9,j8,j7,j6,j5,j4,j3,j2,j1,j0,i9,i8,i7,i6,i5,i4,i3,i2,i1,i0,h9,h8,h7,h6,h5,h4,h3,h2,h1,h0,g9,g8,g7,g6,g5,g4,g3,g2,g1,g0,f9,f8,f7,f6,f5,f4,f3,f2,f1,f0,e9,e8,e7,e6,e5,e4,e3,e2,e1,e0,d9,d8,d7,d6,d5,d4,d3,d2,d1,d0,c9,c8,c7,c6,c5,c4,c3,c2,c1,c0,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0,a9,a8,a7,a6,a5,a4,a3,a2,a1,a0");						assertNull('adding null', instance.add(null));			trace('alphabet ordered stuff: ' + instance.toArray().toString());				assertEquals(instance.search('a0'), 'a0');			assertEquals(instance.search('a10'), null);			assertEquals(instance.search('z9'), 'z9');			assertEquals(instance.search('g3'), 'g3');			assertEquals(instance.search('l2'), 'l2');			assertEquals(instance.search('q8'), 'q8');			assertEquals(instance.search('d5'), 'd5');		}
		
		/**		 *	a test implementation		 */		public function testInstantiated() : void {			assertTrue("OrderedList instantiated", instance is OrderedList);		}	}}