package nl.dpdk.collections {	import nl.dpdk.collections.sorting.Comparators;	import nl.dpdk.collections.sorting.SortOrder;	public class ComparatorsTest extends CollectionTest {		private var instance : Comparators;		/**		 * constructor		 */		public function ComparatorsTest(testMethod : String = null) {			super(testMethod);		}				/**		 * this method sets up all stuff we need before we run the test		 */		protected override function setUp() : void {		}				/**		 *	use to remove all stuff not needed after this test		 */		protected override function tearDown() : void {			instance = null;		}				public function testIntegerComparators() : void {			trace("ComparatorsTest.testIntegerComparators()");			assertEquals(Comparators.compareIntegers(1, 2), SortOrder.LESS);				assertEquals(Comparators.compareIntegers(1, 1), SortOrder.EQUAL);				assertEquals(Comparators.compareIntegers(2, 1), SortOrder.LARGER);				assertEquals(Comparators.compareIntegers(0, 1), SortOrder.LESS);				assertEquals(Comparators.compareIntegers(0, 0), SortOrder.EQUAL);				assertEquals(Comparators.compareIntegers(1, 0), SortOrder.LARGER);				assertEquals(Comparators.compareIntegersDescending(1, 2), SortOrder.LARGER);				assertEquals(Comparators.compareIntegersDescending(1, 1), SortOrder.EQUAL);				assertEquals(Comparators.compareIntegersDescending(2, 1), SortOrder.LESS);				assertEquals(Comparators.compareIntegersDescending(0, 1), SortOrder.LARGER);				assertEquals(Comparators.compareIntegersDescending(0, 0), SortOrder.EQUAL);				assertEquals(Comparators.compareIntegersDescending(1, 0), SortOrder.LESS);		}				public function testStringComparators() : void {			trace("ComparatorsTest.testStringComparators()");			assertEquals(Comparators.compareString("a", "a"), SortOrder.EQUAL);			assertEquals(Comparators.compareString("a", "b"), SortOrder.LESS);			assertEquals(Comparators.compareString("b", "a"), SortOrder.LARGER);						assertEquals(Comparators.compareString("A", "a"), SortOrder.LESS);			assertEquals(Comparators.compareString("a", "A"), SortOrder.LARGER);			assertEquals(Comparators.compareString("A", "A"), SortOrder.EQUAL);						assertEquals(Comparators.compareString("A", "B"), SortOrder.LESS);			assertEquals(Comparators.compareString("B", "a"), SortOrder.LESS);			assertEquals(Comparators.compareString("Z", "a"), SortOrder.LESS);						assertEquals(Comparators.compareStringDescending("A", "B"), SortOrder.LARGER);			assertEquals(Comparators.compareStringDescending("B", "a"), SortOrder.LARGER);			assertEquals(Comparators.compareStringDescending("Z", "a"), SortOrder.LARGER);					assertEquals(Comparators.compareStringCaseInsensitive("a", "a"), SortOrder.EQUAL);			assertEquals(Comparators.compareStringCaseInsensitive("a", "b"), SortOrder.LESS);			assertEquals(Comparators.compareStringCaseInsensitive("b", "a"), SortOrder.LARGER);						assertEquals(Comparators.compareStringCaseInsensitive("A", "a"), SortOrder.EQUAL);			assertEquals(Comparators.compareStringCaseInsensitive("a", "A"), SortOrder.EQUAL);			assertEquals(Comparators.compareStringCaseInsensitive("A", "A"), SortOrder.EQUAL);					assertEquals(Comparators.compareStringCaseInsensitive("a", "B"), SortOrder.LESS);			assertEquals(Comparators.compareStringCaseInsensitive("B", "a"), SortOrder.LARGER);		}	}}