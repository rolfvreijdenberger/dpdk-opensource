package nl.dpdk.commands {	import asunit.framework.TestCase;	/**	 * @author rolf	 */	public class CommandTest extends TestCase {		private var count : Number = 0;		private var callbackParam1: int =  0;		private var callBackParam2: int = 0;		private var callBackParam3: int = 0;		private var callBackParam4 : String;										public function CommandTest(testMethod : String = null) {			trace("CommandTest.CommandTest()");			super(testMethod);		}		public function testInterface() : void {			trace('testInterface');			var command : ICommand = new CompositeCommand();			assertTrue('is ICommand', command is ICommand);			assertTrue('is ICompositeCommand', command is ICompositeCommand);			}				public function testCallBackCommand():void{						trace("CommandTest.testCallBackCommand()");			var command: ICommand = new CallbackCommand(myCallBack, 1, 2, Math.PI);			assertEquals("1", callbackParam1, 0);			assertEquals("1",callBackParam2, 0);			assertEquals("1",callBackParam3, 0);			command.execute();			assertEquals("2",callbackParam1, 1);			assertEquals("2",callBackParam2, 2);			assertEquals("2",callBackParam3, 3);			command.execute();			assertEquals("3",callbackParam1, 1);			assertEquals("3",callBackParam2, 4);			assertEquals("3",callBackParam3, 3);						//reset			callbackParam1 = callBackParam2 = callBackParam3 = 0;			//typed params			command = new CallbackCommand(typedCallBack, 1,2, Math.PI, "hi");						assertEquals("1", callbackParam1, 0);			assertEquals("1",callBackParam2, 0);			assertEquals("1",callBackParam3, 0);			command.execute();			assertEquals("2",callbackParam1, 1);			assertEquals("2",callBackParam2, 2);			assertEquals("2",callBackParam3, 3);			assertEquals("2",callBackParam4, "hi");			command.execute();			assertEquals("3",callbackParam1, 1);			assertEquals("3",callBackParam2, 4);			assertEquals("3",callBackParam3, 3);			assertEquals("2",callBackParam4, "hi");									//reset			callbackParam1 = callBackParam2 = callBackParam3 = 0;			//typed params, but intentionaly false types, should generate runtime error			command = new CallbackCommand(typedCallBack, 1,2, 'THis should be a number', 1.123);			assertEquals("1", callbackParam1, 0);			assertEquals("1",callBackParam2, 0);			assertEquals("1",callBackParam3, 0);						//SO... it turns out this will not generate a runtime error you could catch with try/catch, instead, it fucks up your variable that uses the parameter			//it does type conversion for you			command.execute();			assertEquals("int or number defaults to zero", callBackParam3, 0);			assertEquals("num to string",callBackParam4, "1.123");			assertEquals("num to string",callBackParam4, 1.123);			assertEquals(callBackParam4.substr(0,2), "1.");			assertTrue(callBackParam4 is String);			assertFalse(callBackParam4 is Number);		}						private function myCallBack(...args) : void {			trace("CommandTest.myCallBack(args)"+ args);			callbackParam1 = args[0];			callBackParam2 += args[1];			callBackParam3 = Math.round(args[2]);		}				private function typedCallBack(v1: int, v2: int, v3: Number, v4: String) : void {			trace("CommandTest.typedCallBack("+v1+", "+ v2 +", "+ v3 +", " + v4 + ")");			callbackParam1 = v1;			callBackParam2 += v2;			callBackParam3 = Math.round(v3);			callBackParam4 = v4;		}		public function testSimpleCommand() : void {			trace('testSimpleCOmmand');			var command : ICommand = new CallbackCommand(commandHelper);				count = 0;			assertEquals('count is 0, not increased yet', count, 0);			command.execute();			assertEquals('count is 1', count, 1);			command.execute();			assertEquals('count is 2', count, 2);		}						public function testCompositeCommand() : void {			trace('testCompositeCOmmand');				var a : ICommand = new CallbackCommand(commandHelper);				var b : ICommand = new CallbackCommand(commandHelper);				var c : ICommand = new CallbackCommand(commandHelper);				var d : ICommand = new CallbackCommand(commandHelper);			var composite : ICompositeCommand = new CompositeCommand();			composite.add(a);				composite.add(b);				composite.add(c);				composite.add(d);				count = 0;			composite.execute();			assertEquals(count, 4);			composite.execute();			assertEquals(count, 8);			composite.remove(a);			assertFalse(composite.contains(a));			composite.execute();			assertEquals(count, 11);			composite.remove(a);			composite.execute();			assertEquals(count, 14);			composite.remove(b);			assertFalse(composite.contains(b));			composite.execute();			assertEquals(count, 16);			composite.remove(c);			assertFalse(composite.contains(c));			composite.execute();			assertEquals(count, 17);			composite.remove(d);			assertFalse(composite.contains(d));			composite.execute();			assertEquals(count, 17);		}		private function commandHelper() : void {			count += 1;			}	}}