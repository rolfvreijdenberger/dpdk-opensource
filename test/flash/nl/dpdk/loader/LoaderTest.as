package nl.dpdk.loader {	import asunit.framework.TestCase;	import nl.dpdk.loader.events.LoaderEvent;	import nl.dpdk.loader.events.LoaderItemEvent;	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.media.Sound;	import flash.net.NetStream;	/**	 * 	 * TODO: add tests for 	 * - loading progress	 * 	 * @author Thomas Brekelmans	 */	public class LoaderTest extends TestCase	{		private var loaderA:Loader;		private var loaderB:Loader;		// helper variable to keep track of how many items are loaded (and in combination with the order of the add statements) which item is done		// helps to make assertions about the loaded item		private var itemsLoaded:uint = 0;		private var asyncHandlerStore:Function;		public function LoaderTest(testMethod:String = null) 		{			super(testMethod);		}		override protected function setUp():void		{		}		override protected function tearDown():void		{		}		public function testALoader():void		{			LoaderManager.getInstance().setMaximumConcurrentRequests(1);			loaderA = new Loader();			assertNotNull(loaderA);						loaderA.destroy();			loaderA = null;		}		public function testBToString():void		{			loaderA = new Loader();			assertEquals(loaderA.toString(), "Loader");						loaderA.destroy();			loaderA = null;		}		public function testCAddSizeContains():void		{			loaderA = new Loader();						assertEquals(loaderA.size(), 0);						loaderA.add("http://www.fake.nl/test.swf");			loaderA.add("http://www.fake.nl/test.mp3");			loaderA.add("http://www.fake.nl/test.jpg");						assertEquals(loaderA.size(), 3);						assertTrue(loaderA.contains("http://www.fake.nl/test.jpg"));			assertFalse(loaderA.contains("http://www.fake.nl/doesntexist.jpg"));						loaderA.destroy();			loaderA = null;		}		public function testDDefaultValues():void		{			loaderA = new Loader();						assertFalse("loader getIsActive() default setting is false", loaderA.getIsActive());			assertFalse("loader getIsPaused() default setting is false", loaderA.getIsPaused());			assertEquals("contentsize is zero", loaderA.getContentSize(), 0);			assertEquals("priority is Priorities.NORMAL (3)", loaderA.getPriority(), Priorities.NORMAL);			assertTrue("progress is NaN", isNaN(loaderA.getProgress()));						loaderA.destroy();			loaderA = null;		}		public function testE1SimpleLoading():void		{			trace("LoaderTest.testE1SimpleLoading");			loaderA = new Loader();			itemsLoaded = 0;						// addAsync with a timeout of 60 seconds to ensure that all content is loaded (and therefor the handler is called) before the timeout expires			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);						loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", {name: "first header image"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", {name: "second header image"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/background.gif", {name: "large background"});			loaderA.add("http://www.dpdk.nl/opensource/files/movieclip/dpdk_header.swf", {name: "header, swf style"});			loaderA.add("http://www.dpdk.nl/opensource/files/sound/blank.mp3", {name: "listen, it's just silent"});			loaderA.add("http://www.dpdk.nl/opensource/files/text/test.txt", {name: "simple text file"});			loaderA.add("http://www.dpdk.nl/opensource/files/video/dpdk_header.flv", {name: "header flv"});			loaderA.add("http://www.dpdk.nl/opensource/files/xml/test.xml", {name: "something random"});						loaderA.execute();		}		public function testE2SimpleLoading():void 		{			trace("LoaderTest.testE2SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE3SimpleLoading():void 		{			trace("LoaderTest.testE3SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE4SimpleLoading():void 		{			trace("LoaderTest.testE4SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE5SimpleLoading():void 		{			trace("LoaderTest.testE5SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE6SimpleLoading():void 		{			trace("LoaderTest.testE6SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE7SimpleLoading():void 		{			trace("LoaderTest.testE7SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testE8SimpleLoading():void 		{			trace("LoaderTest.testE8SimpleLoading");			asyncHandlerStore = addAsync(simpleLoadingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		private function simpleLoadingLoaderItemDoneHandler(event:LoaderItemEvent):void 		{			trace("simpleLoadingLoaderItemDoneHandler");						loaderA.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);						itemsLoaded++;						// order of items is known from testESimpleLoading, is the order in which the add statements are placed			switch (itemsLoaded)			{				case 1:					assertEquals("first loaded asset has the proper name", event.getData().name, "first header image");					assertEquals("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", event.getUrl());					assertEquals(DataTypes.BITMAP_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is DisplayObject);										assertEquals(loaderA.size(), 8);					break;				case 2:					assertEquals("second loaded asset has the proper name", event.getData().name, "second header image");					assertEquals("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", event.getUrl());					assertEquals(DataTypes.BITMAP_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is DisplayObject);										assertEquals(loaderA.size(), 7);					break;				case 3:					assertEquals("third loaded asset has the proper name", event.getData().name, "large background");					assertEquals("http://www.dpdk.nl/opensource/files/images/background.gif", event.getUrl());					assertEquals(DataTypes.BITMAP_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is DisplayObject);										assertEquals(loaderA.size(), 6);					break;				case 4:					assertEquals("fourth loaded asset has the proper name", event.getData().name, "header, swf style");					assertEquals("http://www.dpdk.nl/opensource/files/movieclip/dpdk_header.swf", event.getUrl());					assertEquals(DataTypes.MOVIE_CLIP_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is MovieClip);										assertEquals(loaderA.size(), 5);					break;				case 5:					assertEquals("fifth loaded asset has the proper name", event.getData().name, "listen, it's just silent");					assertEquals("http://www.dpdk.nl/opensource/files/sound/blank.mp3", event.getUrl());					assertEquals(DataTypes.SOUND_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is Sound);										assertEquals(loaderA.size(), 4);					break;				case 6:					assertEquals("sixth loaded asset has the proper name", event.getData().name, "simple text file");					assertEquals("http://www.dpdk.nl/opensource/files/text/test.txt", event.getUrl());					assertEquals(DataTypes.TEXT_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is String);										assertEquals(loaderA.size(), 3);					break;				case 7:					assertEquals("seventh loaded asset has the proper name", event.getData().name, "header flv");					assertEquals("http://www.dpdk.nl/opensource/files/video/dpdk_header.flv", event.getUrl());					assertEquals(DataTypes.VIDEO_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is NetStream);										assertEquals(loaderA.size(), 2);					break;				case 8:					assertEquals("eighth loaded asset has the proper name", event.getData().name, "something random");					assertEquals("http://www.dpdk.nl/opensource/files/xml/test.xml", event.getUrl());					assertEquals(DataTypes.XML_TYPE, event.getLoaderType());					assertTrue(event.getLoadedContent() is XML);										assertEquals(loaderA.size(), 1);					break;			}		}		public function testF1SimpleLoadingFinished():void		{			loaderA = new Loader();			itemsLoaded = 0;						// addAsync with a timeout of 60 seconds to ensure that all content is loaded (and therefor the handler is called) before the timeout expires			asyncHandlerStore = addAsync(simpleLoadingLoaderDoneHandler, 1000);			loaderA.addEventListener(LoaderEvent.DONE, asyncHandlerStore);						loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", {name: "first header image"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", {name: "second header image"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/background.gif", {name: "large background"});			loaderA.add("http://www.dpdk.nl/opensource/files/movieclip/dpdk_header.swf", {name: "header, swf style"});			loaderA.add("http://www.dpdk.nl/opensource/files/sound/blank.mp3", {name: "listen, it's just silent"});			loaderA.add("http://www.dpdk.nl/opensource/files/text/test.txt", {name: "simple text file"});			loaderA.add("http://www.dpdk.nl/opensource/files/video/dpdk_header.flv", {name: "header flv"});			loaderA.add("http://www.dpdk.nl/opensource/files/xml/test.xml", {name: "something random"});						loaderA.execute();		}		private function simpleLoadingLoaderDoneHandler(event:LoaderEvent):void 		{			loaderA.removeEventListener(LoaderEvent.DONE, asyncHandlerStore);						assertFalse(loaderA.getIsActive());			assertEquals(0, loaderA.size());						loaderA.destroy();			loaderA = null;						trace("simpleLoading LOADER DoneHandler()");		}	/**	 * The following four functions are commented out, since we can't test them right now. Reason for this is - among other things - 	 * a dutch operating system, which will return a dutch error rather than an english. Also, our ISP redirects invalid adresses	 * to a search site of their own, which apparently returns an 'Error #2124: Loaded file is an unknown type', rather 	 * than an 'Error #2036: Load Never Completed'.	 *///		public function testG1SimpleItemLoadingErrorHandling():void//		{//			trace("testG1SimpleItemLoadingErrorHandling");//			//			loaderA = new Loader();//			itemsLoaded = 0;//			//			// addAsync with a timeout of 60 seconds to ensure that all content is loaded (and therefor the handler is called) before the timeout expires//			asyncHandlerStore = addAsync(simpleItemLoadingWithErrorsErrorHandler, 1000);//			loaderA.addEventListener(LoaderItemEvent.ERROR, asyncHandlerStore);//			//			loaderA.add("http://www.nonexisting.com/ERROR.jpg", {name: "THIS WILL GIVE AN ERROR"});//			loaderA.add("http://www.dpdk.nl/opensource/files/xml/test.xml", {name: "WILL LOAD"});//			//			loaderA.execute();//		}////		private function simpleItemLoadingWithErrorsErrorHandler(event:LoaderItemEvent):void //		{//			trace("simpleItemLoadingWithErrors ERROR Handler");//			//			assertEquals("http://www.nonexisting.com/ERROR.jpg", event.getUrl());//			assertTrue(event.getError().indexOf("Error #") != -1);//			assertEquals("Error #2036: Load Never Completed. URL: http://nonexisting.com/ERROR.jpg", event.getError());//		}////		public function testG2SimpleItemLoadingErrorHandling():void//		{//			trace("testG2SimpleItemLoadingErrorHandling");//			//			// addAsync with a timeout of 60 seconds to ensure that all content is loaded (and therefor the handler is called) before the timeout expires//			asyncHandlerStore = addAsync(simpleItemLoadingWithErrorsDoneHandler, 1000);//			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);//		}////		private function simpleItemLoadingWithErrorsDoneHandler(event:LoaderItemEvent):void //		{//			trace("simpleItemLoadingWithErrors DONE Handler");//			//			assertEquals(event.getData().name, "WILL LOAD");//			//			loaderA.destroy();//			loaderA = null;//		}		public function testH1LoaderPriorityShuffling():void		{			trace("testH1LoaderPriorityShuffling");						itemsLoaded = 0;						loaderA = new Loader();						loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", {name: "first header image from loader A"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", {name: "second header image from loader A"});						loaderA.execute();		}		public function testH2LoaderPriorityShuffling():void		{			trace("testH2LoaderPriorityShuffling");						loaderB = new Loader(Priorities.HIGH);						loaderB.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", {name: "first header image from loader B"});			loaderB.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", {name: "second header image from loader B"});						loaderB.execute();		}		public function testH3LoaderPriorityShuffling():void		{			trace("testH3LoaderPriorityShuffling");						asyncHandlerStore = addAsync(priorityShufflingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testH4LoaderPriorityShuffling():void		{			trace("testH4LoaderPriorityShuffling");						asyncHandlerStore = addAsync(priorityShufflingLoaderItemDoneHandler, 1000);			loaderB.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testH5LoaderPriorityShuffling():void		{			trace("testH5LoaderPriorityShuffling");						asyncHandlerStore = addAsync(priorityShufflingLoaderItemDoneHandler, 1000);			loaderB.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		public function testH6LoaderPriorityShuffling():void		{			trace("testH6LoaderPriorityShuffling");						asyncHandlerStore = addAsync(priorityShufflingLoaderItemDoneHandler, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);		}		private function priorityShufflingLoaderItemDoneHandler(event:LoaderItemEvent):void 		{			trace("priorityShufflingLoaderItemDoneHandler name " + event.getData().name);						itemsLoaded++;						// order of items is assumed (and therefor tested):			// loaderA first wallpaper from loaderA			// loaderB first wallpaper from loaderB			// loaderB second wallpaper from loaderB			// loaderA second wallpaper from loaderA			// this order is the  way it is because:			// 1) loaderA is the first loader that registers, and therefor the first task of loaderA is immediately loaded			// 2) loaderB has a higher priority, so after the first task of loaderA is done, both tasks of loaderB are loaded next			// 3) after loaderB is completely done, the remaining (second) task from loaderA is loaded			switch (itemsLoaded)			{				case 1:					loaderA.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);										assertEquals("first loaded asset is called 'first header image from loader A'", event.getData().name, "first header image from loader A");										assertEquals(loaderA.size(), 2);					assertEquals(loaderB.size(), 2);					break;				case 2:					loaderB.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);										assertEquals("second loaded asset is called 'first header image from loader B'", event.getData().name, "first header image from loader B");										assertEquals(loaderA.size(), 1);					assertEquals(loaderB.size(), 2);					break;				case 3:					loaderB.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);										assertEquals("third loaded asset is called 'second header image from loader B'", event.getData().name, "second header image from loader B");										assertEquals(loaderA.size(), 1);					assertEquals(loaderB.size(), 1);					break;				case 4:					loaderA.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);										assertEquals("fourth loaded asset is called 'second header image from loader A'", event.getData().name, "second header image from loader A");										assertEquals(loaderA.size(), 1);					assertEquals(loaderB.size(), 0);					break;			}		}		public function testI1PauseResume():void		{			itemsLoaded = 0;						loaderA = new Loader();						loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.jpg", {name: "first header image from loader A"});			loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.png", {name: "second header image from loader A"});						loaderA.execute();						assertFalse(loaderA.getIsPaused());			assertTrue(loaderA.getIsActive());						loaderA.pause();						assertTrue(loaderA.getIsPaused());			assertFalse(loaderA.getIsActive());						loaderA.resume();						assertFalse(loaderA.getIsPaused());			assertTrue(loaderA.getIsActive());						loaderA.destroy();			loaderA = null;		}		public function testJ1CustomTasksAndTypes():void		{			itemsLoaded = 0;						LoaderManager.getInstance().registerExtensionToDataType(".dpdk", DataTypes.BITMAP_TYPE);						loaderA = new Loader();						loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.dpdk", {info: "same image as the .jpg file, just renamed"});						asyncHandlerStore = addAsync(customTaskAndTypesLoaderItemDoneHandler1, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);						loaderA.execute();		}		private function customTaskAndTypesLoaderItemDoneHandler1(event:LoaderItemEvent):void 		{			assertEquals(event.getData().info, "same image as the .jpg file, just renamed");			assertEquals("http://www.dpdk.nl/opensource/files/images/dpdk_header.dpdk", event.getUrl());			assertEquals(DataTypes.BITMAP_TYPE, event.getLoaderType());			assertTrue(event.getLoadedContent() is Bitmap);						loaderA.destroy();			loaderA = null;		}		public function testJ2CustomTasksAndTypes():void		{			itemsLoaded = 0;						LoaderManager.getInstance().registerTaskDefinitionToDataType(BitmapLoadTaskDpdk, BitmapLoadTaskDpdk.DATA_TYPE);			// first register (again, see previous test) to the normal BitmapLoadTask			LoaderManager.getInstance().registerExtensionToDataType(".dpdk", DataTypes.BITMAP_TYPE);			// then test if the override to BitmapLoadTaskDpdk's data type works			LoaderManager.getInstance().registerExtensionToDataType(".dpdk", BitmapLoadTaskDpdk.DATA_TYPE);						loaderA = new Loader();			loaderA.add("http://www.dpdk.nl/opensource/files/images/dpdk_header.dpdk", {info: "same image as the .jpg file, just renamed"});						asyncHandlerStore = addAsync(customTaskAndTypesLoaderItemDoneHandler2, 1000);			loaderA.addEventListener(LoaderItemEvent.DONE, asyncHandlerStore);						loaderA.execute();		}		private function customTaskAndTypesLoaderItemDoneHandler2(event:LoaderItemEvent):void 		{			assertEquals("same image as the .jpg file, just renamed", event.getData().info);			assertEquals("http://www.dpdk.nl/opensource/files/images/dpdk_header.dpdk", event.getUrl());			// this validates that the item was processed with the BitmapLoadTaskDpdk			assertEquals(8, event.getLoaderType());			// something was injected in data by the BitmapLoadTaskDpdk constructor, make sure it's there			assertEquals("this property and value were injected inside BitmapLoadTaskDpdk", event.getData().dpdk);						loaderA.removeEventListener(LoaderItemEvent.DONE, asyncHandlerStore);						loaderA.destroy();			loaderA = null;		}
	}}import nl.dpdk.loader.events.LoaderItemProgressEvent;import nl.dpdk.loader.tasks.LoadTask;import flash.display.Loader;import flash.events.Event;import flash.events.HTTPStatusEvent;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.net.URLRequest;internal class BitmapLoadTaskDpdk extends LoadTask{	public static const DATA_TYPE:uint = 8;	private var loader:Loader;	public function BitmapLoadTaskDpdk(url:String, data:*) 	{		data.dpdk = "this property and value were injected inside BitmapLoadTaskDpdk";		super(url, data, BitmapLoadTaskDpdk.DATA_TYPE);	}	override protected function createLoader():void	{		loader = new Loader();	}	override protected function addLoaderListeners():void	{		loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		loader.contentLoaderInfo.addEventListener(Event.OPEN, startHandler);  		loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);		loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);		loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);		loader.contentLoaderInfo.addEventListener(Event.INIT, initHandler);		loader.contentLoaderInfo.addEventListener(Event.UNLOAD, unloadHandler);	}	private function removeLoaderListeners():void	{		loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		loader.contentLoaderInfo.removeEventListener(Event.OPEN, startHandler);  		loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);		loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);		loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, completeHandler);		loader.contentLoaderInfo.removeEventListener(Event.INIT, initHandler);		loader.contentLoaderInfo.removeEventListener(Event.UNLOAD, unloadHandler);	}	private function ioErrorHandler(event:IOErrorEvent):void	{		fail(event.text);	}	private function securityErrorHandler(error:SecurityError):void	{		fail(error.message);	}	private function startHandler(event:Event):void	{	}	private function progressHandler(event:ProgressEvent):void	{		updateLoadStats(event.bytesLoaded);		dispatchEvent(new LoaderItemProgressEvent(LoaderItemProgressEvent.PROGRESS, event.bytesLoaded / event.bytesTotal, bytesAdded, event.bytesTotal, url, data, loaderType));	}	private function httpStatusHandler(event:HTTPStatusEvent):void	{	}	private function completeHandler(event:Event):void	{	}	private function initHandler(event:Event):void	{		loadedContent = loader.content;    			done();	}	private function unloadHandler(event:Event):void	{	}	override protected function executeTaskHook():void	{		try		{			loader.load(new URLRequest(url));		}        catch (error:SecurityError)		{			securityErrorHandler(error);			}		}	override protected function destroyTaskHook():void	{		removeLoaderListeners();		loadedContent = null;		loader = null;		}	override public function toString():String	{		return "BitmapLoadTaskDpdk";	}	}