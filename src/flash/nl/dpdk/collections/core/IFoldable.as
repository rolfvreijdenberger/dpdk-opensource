/*Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.collections.core {	/**	 * In functional programming, fold, also known variously as reduce, accumulate, compress or inject, 	 * is a family of higher-order functions that process a data structure in some order and build up a return value. 	 * Typically, a fold deals with two things: a combining function and a data structure, 	 * typically a list of elements. 	 * The fold then proceeds to combine elements of the data structure using the function 	 * in some systematic way.	 * Objects in the object-oriented programming paradigm can be used as higher order functions.	 * This implementation is an interface to explicitely state that a collection structure can apply fold functionality on each element of the collection.	 * @see IFolder	 * @see http://en.wikipedia.org/wiki/Fold_(higher-order_function)	 * @author rolf vreijdenberger	 */	public interface IFoldable {		/**		 * @param folder an IFolder implementation that holds the accumulating logic and the accumulated result.		 * @return an untyped data item containing the result of the accumulating/folding logic that was applied to each element on the collection.		 */		function fold(folder : IFolder) : *;	}}