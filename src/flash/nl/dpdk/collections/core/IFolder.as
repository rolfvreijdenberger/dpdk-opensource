/*Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.collections.core {	/**	 * In functional programming, fold, also known variously as reduce, accumulate, compress or inject, 	 * is a family of higher-order functions that process a data structure in some order and build up a return value. 	 * Typically, a fold deals with two things: a combining function and a data structure, 	 * typically a list of elements. 	 * The fold then proceeds to combine elements of the data structure using the function 	 * in some systematic way.	 * Objects in the object-oriented programming paradigm can be used as higher order functions, in this case, an implementation of IFolder.	 * This implementation stores the result of an action over a collection of items.	 * This might be a sum, average or whatever else that can be collected/accumulated.	 * The result can then be retrieved via the get() method.	 * Since IFoldable returns the value of a call to IFolder.get(), the concrete IFolder that was passed by reference to the IFoldable.fold() method can have more methods on it that can be used to query the IFolder.	 * By necessity, the implementation of IFolder will hold state.	 * Because it holds state, the state needs to be reset when using an IFolder again.	 * When reusing an IFolder, be sure to either clear or reset the IFolder, or create a new instance of it.	 * This can be achieved by clearing the instance variable in the get() method. (store the value in a temp var, clear the instance variable, return the temp var)	 * @see IFoldable	 * @see http://en.wikipedia.org/wiki/Fold_(higher-order_function)	 * @author rolf vreijdenberger	 */	public interface IFolder {				/**		 * @param item An untyped data item that will be used in the folding/accumulating logic.		 */		function fold(item : *) : void;		/**		 * returns the result of the folding activity.		 * The method itself may apply some logic on the results of the folding activity (eg: calculating the average).		 * @return An untyped data item that contains the result of any previous (or initialized) data manipulation by the fold() method.		 */		function get() : *;	}}