/*Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.collections.core {	import nl.dpdk.collections.core.IMapper;	import nl.dpdk.collections.lists.List;			/**	 * http://en.wikipedia.org/wiki/Map_(higher-order_function) 	 * In many programming languages, map is the name of a higher-order function that applies a given function to a sequence of elements (such as a list) and returns a sequence of results.	 * In this case, we do not provide a function, but an IMapper instance which holds the map() method, which returns a transformation (or map) of the element on the collection to which it is applied.	 * @see IMapper	 * @author rolf vreijdenberger	 */	public interface IMappable {		/**		 * Apply some logic to each element of a collection and return a new list with the transformed (probably new) elements.		 * An example: a mapper for a collection of integers which returns a list of all squared values. 		 * An example: a mapper for a collection of object which are used as flash domain objects, which are translated to objects/structures that will be sent via flash remoting to a php backend script.		 * @param mapper an IMapper implementation, which does a transformation/map on each element in a collection.		 */		function map(mapper : IMapper) : List;	}}