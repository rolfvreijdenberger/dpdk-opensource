/*Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.collections.graphs.utils {	import nl.dpdk.collections.graphs.Graph;				/**	 * Proves the existence of a euler path.	 * A Euler path is a path in a graph that connects two nodes while using each edge in the graph only once.	 * 	 * //TODO finish this class, as of yet, it is not correct	 * @author rolf	 */	public class EulerPath {				private var exists : Boolean = false;		public function EulerPath(graph : Graph) {			if(graph.isDirected()){				exists = false;				return;				}			var cc : ConnectedComponents = new ConnectedComponents(graph);			if(cc.getConnectionCount() != 1){				exists = false;				return;				}			var gd : GraphDegree = new GraphDegree(graph);			for(var i : int = 0;i < graph.size(); ++i) {				if(gd.getDegree(graph.get(i)) % 2 != 0) {					exists = false;					return;				}			}			exists = true;		}		public function pathExists() : Boolean {			return exists;			}	}}