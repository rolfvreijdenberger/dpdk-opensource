package nl.dpdk.collections.graphs.utils {	import nl.dpdk.collections.graphs.Graph;	import nl.dpdk.collections.graphs.GraphNode;	import nl.dpdk.collections.lists.ArrayList;	import nl.dpdk.collections.lists.List;		/**	 * The shortest path algorithm, also known as Dijkstra's algorithm (after the Dutch computer scientist E. Dijkstra), is used on an edge (positive) weighted graph.	 * It gets the shortest path for every existing path from a specific node.	 * preprocessing is done in the constructor, the getShortestPath method then allows constant time lookup.	 * When used on a dynamic Graph, the results of this class might be invalidated when stuff is added/removed from the Graph in the meantime.]	 * @author rolf	 * TODO: implement algorithm	 */	public class ShortestPath {				private var graph : Graph;		private var from : GraphNode;		public function ShortestPath(graph : Graph, from : GraphNode) {								this.from = from;			this.graph = graph;		}		public function getShortestPath(to : GraphNode) : List {			var list : List = new ArrayList();			return list;		}	}}