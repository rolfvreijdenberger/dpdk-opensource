/*Copyright (c) 2009 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.loader.events {	import flash.events.Event;	/**     * LoaderItemEvent is dispatched via Loader when an item has finished or encountered an error.     * TODO, explain class usage     * @see Loader     *      * @author Thomas Brekelmans     */    final public class LoaderItemEvent extends Event    {        public static const DONE:String = "LoaderItemEvent_DONE";		public static const ERROR:String = "LoaderItemEvent_ERROR";        		private var loadedContent:*;		private var url:String;		private var data:*;		private var loaderType:uint;		private var error:String;        public function LoaderItemEvent(type:String, loadedContent:*, url:String, data:*, loaderType:uint, error:String = "")		{			super(type);			this.loadedContent = loadedContent;			this.url = url;			this.data = data;			this.loaderType = loaderType;			this.error = error;			        }		        override public function clone():Event        {            return new LoaderItemEvent(type, loadedContent, url, data, loaderType, error);        }				/**		 * TODO, per task aangeven wat het default type is voor je cast		 */		public function getLoadedContent():*		{			return loadedContent;		}				public function getUrl():String		{			return url;		}				public function getData():*		{			return data;		}				public function getLoaderType():uint		{			return loaderType;		}				public function getError():String		{			return error;		}		        /**         * Returns a special event String representation of this class.         */        override public function toString():String        {            return formatToString("LoaderItemEvent", "type", "bubbles", "cancelable", "eventPhase");		}	}}