/*Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.utils {	import flash.utils.ByteArray;		/**	 * diverse functionalities for math/calculation based stuff	 * @author rolf vreijdenberger	 */	public class MathUtils {		/**		 * checks if a number is between a high and a low value (not inclusive)		 * @param operand the number to check		 * @param low the lowest number of the bounds		 * @param high the highest number of the bounds		 */		public static function between(operand : Number, low : Number, high : Number) : Boolean {			return operand > low && operand < high;		}				/**		 * checks if a number is between a high and a low value (inclusive)		 * @param operand the number to check		 * @param low the lowest number of the bounds		 * @param high the highest number of the bounds		 */		public static function betweenInclusive(operand : Number, low : Number, high : Number) : Boolean {			return operand >= low && operand <= high;		}				/**		public static function getRandBetween(min: Number, max : Number) : Number {		if(max <= min) return 0;		var rand : Number = Math.random();		//TODO					return;		}		 */		/**		 * get a hexadecimal string representation from a byteArray		 * TODO: test, this was written without testing at all!		 */		public static function getHexadecimalStringFromBytes(b : ByteArray) : String {			var hex : String = "";			var store: String = getHexStore();			var  mostSignificantByte : int;			var leastSignificantByte : int = 0;			for (var i : int = 0;i < b.length; i++) {				mostSignificantByte = (b[i] & 0xFF) / 16;				leastSignificantByte = ( b[i] & 0xFF) % 16;				hex = hex + store.charAt(mostSignificantByte) + store.charAt(leastSignificantByte);			}			return hex;		}		/**		 * hex store is a string containing all valid hexadecimal entities in string form at the correct string position		 */		private static function getHexStore() : String {			return "0123456789abcdef";			}	}}