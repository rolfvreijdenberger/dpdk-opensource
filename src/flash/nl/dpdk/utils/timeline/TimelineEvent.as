/*Copyright (c) 2009 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.utils.timeline {	import flash.display.MovieClip;	import flash.display.Scene;	import flash.events.Event;		/**	 * Event class that supports the TimelineListener.	 * @see nl.dpdk.utils.TimelineListener	 * @author rolf vreijdenberger	 */	public class TimelineEvent extends Event {		//a new label has been reached on the timeline		public static const NEW_LABEL : String = "new label reached";		//a new scene has been reached on the timeline		public static const NEW_SCENE : String = "new scene reached";		//we are at the end of a timeline (only fired once for each time we reach the end)		public static const TIMELINE_END : String = "end of timeline reached";		private var frame : uint;		private var label : String;		private var scene : Scene;		private var timeline : MovieClip;		public function TimelineEvent(type : String, frame : uint, label : String, scene : Scene, timeline : MovieClip) {			super(type);			this.frame = frame;			this.label = label;			this.scene = scene;			this.timeline = timeline;		}		override public function clone() : Event {			return new TimelineEvent(type, frame, label, scene, timeline);		}		/**		 * gets the frame the timeline is at		 */		public function getFrame() : uint {			return frame;		}		/**		 * gets the framelable the timeline is at		 */		public function getLabel() : String {			return label;		}		/**		 * get the scene the timeline is at		 */		public function getScene() : Scene {			return scene;		}		/**		 * gets the movieclip that dispatched the event (can also be reached via event.target, but this is cast already)		 */		public function getTimeline() : MovieClip {			return timeline;		}		/**		 * Returns a string representation of this class.		 */		override public function toString() : String {			return formatToString("TimelineEvent", "type", "bubbles", "cancelable", "eventPhase", "frame", "label", "scene", "timeline");		}	}}