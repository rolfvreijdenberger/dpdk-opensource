package nl.dpdk.sound{    import flash.events.Event;            /**     * SoundFileEvent.     *      * @see SoundFile.     *      * @author Oskar van Velden     */    final public class SoundFileEvent extends Event    {    	public static const SOUND_COMPLETE : String = "soundfileevent_SOUND_COMPLETE";    	    	public var soundId:String;    	        /**         * Creates a new SoundFileEvent.         *          * @param type The type of event that is created.         * @param bubbles Indicates whether or not this event bubbles.         * @param cancelable Indicates whether or not this event can be aborted.         */        public function SoundFileEvent(type:String, soundId:String, bubbles:Boolean = false, cancelable:Boolean = false)        {            super(type, bubbles, cancelable);                        this.soundId = soundId;        }                /**         * This function is needed for event-bubbling, it clones itself.         *         * @return An exact copy of this instance downcasted to a generic Event.         */        override public function clone():Event        {            return new SoundFileEvent(type, soundId, bubbles, cancelable);        }        /**         * Returns a special event String representation of this class.         *         * @return SoundFileEvent as a String with the values of the class'          * type, bubbles, cancelable and eventPhase appended to it.         */        override public function toString():String        {            return formatToString("SoundFileEvent", "type", "soundId", "bubbles", "cancelable", "eventPhase");        }    }}