/**
 * pings all connected clients. 
 * if application.onDisconnect is not triggered (this is possible and a known bug on fms) then this will remove a client that is offline.
 * The NetConnection object on the flash client needs to implement a public method called "ping" that returns true on it's netconnection object (or netconnection.client).
 * 
 * Keep in mind that if a flash player is a DEBUG player, and a runtime error occurs, the flash player freezes...
 * This can cause a ping to NOT respond, and that specific client will be disconnected!
 * 
 * 
 * @param {Object} pingTime the time in milliseconds that will be used for pinging all clients in an interval.
 * @param {Object} responseTime the time frame within which a client needs to respond to be marked as online.
 */

function KeepAlive(pingTime, responseTime){
	this.clients = new Array();
	this.intervalId;
	this.pingTime = pingTime;
	this.responseTime = responseTime;
	this.start();
	
}

KeepAlive.prototype.start = function(){
	this.stop();
	this.intervalId = setInterval(this, "ping", this.pingTime);
	
	
}

KeepAlive.prototype.add = function(client){
	if(this.contains(client)){
		return;
	}
	this.clients.push(new Responder(client, this));
	
	
}

KeepAlive.prototype.stop = function(){
	clearInterval(this.intervalId);
}

KeepAlive.prototype.destroy = function(){
	this.stop();
	var responder;
	for(var i = 0;i<this.clients.length;++i){
		responder = this.clients[i];
		responder.destroy();
	}
	this.clients = null;
	this.pingTime = null;
	this.responseTime = null;
	this.intervalId = null;
	
}



KeepAlive.prototype.ping = function(){
	Log.output("KeepAlive.ping() clients: " + this.clients.length);
	var responder;
	for(var i = 0;i<this.clients.length;++i){
		responder = this.clients[i];
		responder.start(this.responseTime);
	}
}

KeepAlive.prototype.contains = function (client){
	var responder;
	for(var i = 0;i<this.clients.length;++i){
		responder = this.clients[i];
		if(responder.client == client){
			return true;
		}
	}
	return false;
}

KeepAlive.prototype.remove = function(client){
	var responder;
	for(var i = 0;i<this.clients.length;++i){
		responder = this.clients[i];
		if(responder.client == client){
			responder.destroy();
			this.clients.splice(i,1);
			return;
		}
	}
}


function Responder(client, scope){
	this.client = client;
	this.scope = scope;
	this.intervalId;
	this.time;
}

Responder.prototype.onResult = function(result){
	this.stop();
}

Responder.prototype.onStatus = function(info){
	Log.output("Responder.OnStatus() in : " + DateUtils.getTimeDifference( DateUtils.generateDate(), this.time) +", " + info.code, Log.LEVEL_INFO);
	this.disconnect();
}

Responder.prototype.destroy = function(){
	//Log.output("Responder.destroy()");
	this.scope = null;
	this.client = null;
	this.time = null;
	clearInterval(this.intervalId);
	this.intervalId = null;
	
}

Responder.prototype.disconnect = function(){
	this.stop();
	Log.output("Responder.disconnect() client error (timeout or onStatus()). responsetime: " + DateUtils.getTimeDifference( DateUtils.generateDate(), this.time), Log.LEVEL_INFO);
	//let the application handle the removal of this client from KeepAlive object.
	application.onDisconnect(this.client);
}

Responder.prototype.start = function(time){
	this.stop();
	this.intervalId = setInterval(this, "disconnect", time);
	this.time = DateUtils.generateDate();
	//methods on the flash client start with 'receive' by (our) convention
	this.client.call("receivePing", this);
}

Responder.prototype.stop = function(){
	clearInterval(this.intervalId);
}


