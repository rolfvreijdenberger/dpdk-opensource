/**
* this file contains the calls that the flashclient can make on the mediaserver
* 
* The only way into the mediaserver for the flashclient is the Client object
* The Client object can be extended by adding methods to it's prototype, which are then publicly reachable.
* 
* Do not put methods on the Client object that are outgoing, as this exposes a wider api than necessary to the world.
* call methods on the flash player's netconnection object by using this.call('flashMethodName', responderObject, arguments);
* 
* This class contains only the core methods we use in our applications.
* Use a seperate class for application specific Client.prototoype stuff.
* 
* Extra functionality on the Client.prototype should be stored in files that will need extra functionality from the Client object.
* see User.asc, RemoteId.asc, Model.asc
*/

/**
* catch all handler, that can either function as a protector of runtime errors on unresolved properties or methods.
* and at the same time, use logging here, so we can catch possible probes from custom written hacking clients.
*/
Client.prototype.__resolve = function(name)
{
	Log.store('Client.__resolve('+name+')', Log.LEVEL_WARN, {ip: this.ip});
	//return true, so hackers always get a fake result
	return true;
}


