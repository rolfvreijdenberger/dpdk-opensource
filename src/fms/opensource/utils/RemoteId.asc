/*
 * RemoteId is an abstraction that makes sure each Client object can be uniquely identified by the fms server,
 * and therefore also by other connected flash Clients.
 * RemoteId will be used to communicate from one flash client to the other.
 * It will serve as a mapping between a flash Client and it's associated user data such as a nickname, userId or p2p nonce in fp10 
 * Using remoteId's is very convenient for Remote Shared Objects as the key for some user data.
 * It allows for very easy and quick lookup of Client objects for communication between two flash clients when only the remoteId is known.
 * This is done via the 'static' method RemoteId.getClientByRemoteId(aRemoteId)
 * 
 * It is also baked into the nl.dpdk.services.fms package on www.dpdk.nl/opensource
 * 
 * This class also puts another method on the Client.prototype
 */

/**
 * creates a new RemoteId object and automatically sets the rId property on the Client object
 * @param {Object} client
 */
function RemoteId(client)
{
	//create a unique id
	this.remoteId = RemoteId.createId();
	//set it on the client object
	client.remoteId = this.remoteId;
	//store a reference to the client object
	this.client = client;
	//store a reference to the remoteId in an object, for very quick lookup throughout the application (so we can find the associated Client)
	RemoteId.all[this.remoteId] = this;
}

/**
 * gets the unique remoteId associated with this instance
 */
RemoteId.prototype.getRemoteId = function(){
	return this.remoteId;
}


RemoteId.prototype.getClient = function(){
	return this.client;
}

/**
* STATIC STUFF
*/
RemoteId.REMOTE_ID_INCREMENTOR								= 1;
RemoteId.REMOTE_ID_START_VALUE 								= 0;
RemoteId.REMOTE_ID											= RemoteId.REMOTE_ID_START_VALUE;
RemoteId.NO_ID 												= -1
//this object stores references to remoteId's which will allow us to do very quick lookups for client objects
RemoteId.all 												= new Object();




/**
* part of our identification scheme for the whole communication with the flash clients.
* remoteId is a major player in uniquely identifying users to the fms.
* @return the new uniqueId (remoteId)
*/
RemoteId.createId = function()
{
	RemoteId.REMOTE_ID += RemoteId.REMOTE_ID_INCREMENTOR;
	return RemoteId.REMOTE_ID;
}

/**
* part of our identification scheme for the whole communication with the flash clients.
* remoteId is a major player in uniquely identifying users to the fms.
* @return the current remoteId.
*/
RemoteId.getCurrentId = function ()
{
	return RemoteId.REMOTE_ID;
}

/**
 * gets a Client object when only the remoteId is provided.
 * This method is essential for communication between flash clients.
 * If one flash client only knows the remoteId of another client (via a shared object for example) it can actually communicate with that client by getting
 * the Client object by it's remoteId and calling a method on that Client object (via fms code ofcourse)
 * @param {Object} remoteId
 */
RemoteId.getClientByRemoteId = function(remoteId)
{
	try
	{
		//lookup the user in the object we created to do quick lookups
		var rId;
		rId = RemoteId.all[remoteId];
		if(rId != undefined && rId != null)
		{
			return rId.client;
		}
		
		//should not happen, but try again on the application.clients list
		var client;
		var allClients = application.clients.length;
		for(var i = 0; i < allClients; ++i)
		{
			client = application.clients[i];
			
			if(client.getRemoteId() == remoteId)
			{
				return client;
			}
		}
	}
	catch(e)
	{
		Log.output("RemoteId.getClientByRemoteId():" + e.message);
		throw new Error("ERROR RemoteId.getClientByRemoteId(): client not found by remoteId (possibly not connected/disconnected): " + remoteId);
	}
	return null;
}





/**
* totally destroys/removes all stuff for a remote id
*/
RemoteId.destroy = function (remoteId)
{
		RemoteId.all[remoteId].client = null;
		RemoteId.all[remoteId] = null;
		delete RemoteId.all[remoteId];
}

/**
* END STATIC STUFF
*/


//default value on Client instance
Client.prototype.remoteId = RemoteId.NO_ID;
/**
* request the remoteId that identifies us to the fms.
* To get a Client object by a remoteId use RemoteId.getClientByRemoteId(rId)
*/
Client.prototype.getRemoteId = function()
{	
	if(this.remoteId == RemoteId.NO_ID){
		new RemoteId(this);
	}
	return this.remoteId;
}
