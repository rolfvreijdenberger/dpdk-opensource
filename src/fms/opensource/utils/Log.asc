/**
* Logging class for outputting to the mediaserver admin console and for logging errors etc.
*/

function Log(){
	throw new Error("do not initialize directly but use static methods");
}


//the log levels
Log.LEVEL_DEBUG 				= 0;
Log.LEVEL_INFO 					= 1;
Log.LEVEL_STATUS 				= 2;
Log.LEVEL_WARN					= 3;
Log.LEVEL_ERROR					= 4;
Log.LEVEL_FATAL					= 5;
//set default
Log.LOG_LEVEL					= 0;



/**
* debugging tracer
*/
Log.output = function(message, level)
{
		if(!level)
		{
			level = Log.LEVEL_DEBUG;
		}
		if(level >= Log.LOG_LEVEL)
		{
			trace(DateUtils.generateFormattedDate() + ": -  " + message);
		}
	
}

/**
* logs stuff to the server
* @param message the message we wish to send
* @param level the Log level of the message
*/
Log.store = function (message, level, parameterObject)
{
	if(!Validate.exists(message))
	{
		return;
	}
	if(!Validate.exists(level))
	{
		level = Log.LEVEL_INFO;
	}
	if(!Validate.exists(parameterObject)){
		parameterObject = new Object();
	}
	parameterObject.servertime = DateUtils.generateFormattedDate();
	
	Log.output('Log.store(' + message + ')', level);
	message = "fms: " + message;
	try {
		DataService.getService().log(new LogHandler(null, 'Log.store()'), message, level, parameterObject);
	}catch(e){
		//when something fails here, this might end up going to Log.store() again, and thus be a recursive call.
		//use a try/catch to disable this
		Log.output("Log.store(): " + e.message);
	}
	
}

/**
 * logging methods into the flash client
*/
Log.debug = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveDebug', null, message);
}
/**
 * logging methods into the flash client
*/
Log.status = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveStatus', null, message);
}
/**
 * logging methods into the flash client
*/
Log.fatal = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveFatal', null, message);
}
/**
 * logging methods into the flash client
*/
Log.warn = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveWarn', null, message);
}

/**
 * logging methods into the flash client
*/
Log.error = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveError', null, message);
}

/**
 * logging methods into the flash client
*/
Log.info = function (client, message)
{
	//methods on the flash client start with 'receive' by (our) convention
	client.call('receiveInfo', null, message);
}