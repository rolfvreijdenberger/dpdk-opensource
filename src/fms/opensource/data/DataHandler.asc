load("utils/Log.asc");
load("utils/DateUtils.asc");
/**
* DataHandler abstracts the handling of the calls made to the php server with AMF remoting
* DataHandler needs to be subclassed ('prototyped') by handlers for specific calls
* DataHandler holds a reference to the calling client that is passed via the constructor, so we can pass the result to the correct client via a callback.
* This implies some knowledge of who the handler is coupled to, but this is justified in the absence of events.
* DataHandler can have additional logic if the need is there
*/

function DataHandler(context, handlerName)
{
	//creation time of this object, to be able to retrieve the time taken for the remote calls
	this.creationTime = new Date();
	//reference to the context, if any
	this.context = context;
	//a name for this handler,we can output this for debug purposes
	this.name = handlerName;
	
	
}

/**
* The default Result handler
* the handler can be overriden from a 'subclass' if necessary
* default implementation is just a Log.output for confirmation
* @param	result	the result object passed back from the service call
*/
DataHandler.prototype.onResult = function(result)
{
	Log.output("DataHandler.onResult " + this.name + " response time = " + this.creationTime );
}

/**
* The defaul Status handler
* the handler can be overriden from a 'subclass' if necessary
* default implementation is just a trace for confirmation
* @param	info	the info object containing more detailed information about the error
*/
DataHandler.prototype.onStatus = function(info)
{
	Log.store('DataHandler.onStatus() in **' + this.name + '**, level: ' + info.level + ', description: ' + info.description + ', line: '+info.line + ',details: '+info.details + ',code: ' + info.code);
}


/**
* this is the time a remote call will take when we retrieve the time via this method in onStatus() or onResult()
*/
DataHandler.prototype.getExistenceTime = function()
{
	return DateUtils.getTimeDifference(new Date(), this.creationTime);
}

/**
 * cleans up, call after a succesful or unsuccesfull call in the subclass's onStatus or onResult
 */
DataHandler.prototype.destroy = function(){
	//Log.output("DataHandler.destroy(): " + this.name);
	this.name = null;
	this.context = null;
	this.creationTime = null;
}
