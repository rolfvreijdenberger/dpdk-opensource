/**
* sets up an inheritance chain for shared objects.
* this way, a subclass will have a sharedObject in it's scope as a field.
*/

/**
 * @param {Object} context, can be anything, but is used for communication to another object. A variant of the mediator pattern.
 */
function SharedObjectAdapter(name, persistent, context){
	if(!persistent){
		persistent = false;
	}

	if(name){
		this.list =  SharedObject.get(name, persistent);
		this.context = context;
	} 
}

SharedObjectAdapter.prototype.setContext = function(context){
	this.context = context;
}

SharedObjectAdapter.prototype.getContext = function(context){
	return this.context;
}

SharedObjectAdapter.prototype.destroy = function(){
	this.list.clear();
}

