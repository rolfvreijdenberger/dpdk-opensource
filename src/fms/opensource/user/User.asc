/**
* User is an abstraction for all user data and user related methods used on fms.
* The Client object contains a reference to a User and User contains a reference to it's client.
* 
* In this way, we can seperate user data from client objects, which is useful if a flash client goes offline, but the user data needs to be cached on the fms.
* 
*/

/**
 * create a new User object
 * @param {Object} client a reference to a Client object
 */
function User(client){
	this.setClient(client);
	this.setName("guest " + this.getRemoteId());
}

/**
 * destructor method. call this when a user can be removed from the system.
 */
User.prototype.destroy = function(){
	this.onDestroy();
	this.client = null;
	this.name = "";
	this.remoteId = RemoteId.NO_ID;
}

/**
 * hook method. to be overriden for specific actions
 */
User.prototype.onDestroy = function(){
	//override in Model.asc
}


/*
 * all default properties are defined here.
 */
User.prototype.name = "guest";
User.prototype.remoteId = RemoteId.NO_ID;
User.prototype.client = null;

/**
 * gets the associated Client object, or null if not available
 */
User.prototype.getClient = function()
{
	return this.client;
}
/**
* create the user on the client object
* TRICKY, this fucks up the debug console of fms when viewing a shared object containing a user object, because of the references (infinite regress from user to client)
* Therefore, when using a user on a shared object, map this user object to a custom object, via a factory method (user.getRSOUser())
* The custom object should have short property names to conserve bandwidth (and has no reference to the client object).
*/
User.prototype.setClient = function (client)
{
	this.client = client;
	
	if(this.client != null)
	{
		this.client.setUser(this);
		this.remoteId = this.client.getRemoteId();
	}else{
		this.remoteId = RemoteId.createId();
	}
	
}

/**
 * A factory method that returns an object derived from the user object to put an  a Remote Shared Object.
 * This object needs to have a simple structure to preserve bandwidth and to keep updates simple.
 * use short property names and think about the structure.
 */
User.prototype.getRSOUser = function(){
	var o = new Object();
	o.rId = this.getRemoteId();
	o.n = this.getName();
	//hook to add more specific stuff to the object, override this in Model.asc
	this.addToRSOUser(o);
	return o;
}

User.prototype.getRemoteId = function(){
	return this.remoteId;
}

User.prototype.addToRSOUser = function(rsoUser){
	//empty hook method, override this in Model.asc
}

User.prototype.getName = function(){
	return this.name;
}

User.prototype.setName = function(name){
	this.name = name;
}



Client.prototype.user = null;
/**
 * sets a user object on the Client instance, this way we are able to reach information about the user via the client (and vice versa)
 * @param user the user object containing information
 *
*/
Client.prototype.setUser = function(user)
{
	this.user = user;
}


Client.prototype.getUser = function ()
{
	return this.user;
}


Client.prototype.setName = function(name){
	//delegate it to the user object.
	this.getUser().setName(name);
	this.getUser().update();
	return name;
}

/**
 * call this method whenever something changes for a client/user and it needs to be updated on the users list.
 * This (template) method also has a hook method that allows us to modify/add logic to our updating routine (maybe we want to change more remote objects, inform other users etc.)
 */
User.prototype.update = function(){
	this.onUpdate();
	application.MODEL.update(this);
}

User.prototype.onUpdate = function(){
	//hook method, override with application specific stuff in Model.asc
}


/**
 * The next is a simple abstraction to use the adobe stratus p2p service or the flash online collaboration platform (cocomo)
 * Basically, the p2p functionality in fp10 can be used via a nonce (unique random string) called nearId.
 * The stratus handshaking server provides this nonce, but flash clients still need a way to get each other's nonce to connect via p2p.
 * This is where this functionality comes into play.
 * 
 * A flash client will call "netconnection.call("setNearId", new Responder(), id);" and the nonce will be available to a Client object.
 * 
 * It can then be shared via for instance a Remote Shared Object.
 * 
 */

//default nearId
User.prototype.nearId = 0;

User.prototype.setNearId = function(id){
	this.nearId = id;
}

/**
 * get the nearId.
 * this is probably called by internal fms logic needing the nearId to give it to another flash client that wants to connect to the flash client represented by this Client instance.
 */
User.prototype.getNearId = function(){
	return this.nearId;
}

/**
 * sets the nearId, via a call from the flash client that has retrieved one via the stratus service
 * @param {Object} id
 */
Client.prototype.setNearId = function(id){
	//delegate it to the user object
	this.getUser().setNearId(id);
	this.update();
}

Client.prototype.destroy = function(){
	this.onDestroy();
	this.user = null;
}

Client.prototype.onDestroy = function(){
	//hook method, implement in Model.asc
}





/**
* catch all handler, that can either function as a protector of runtime errors on unresolved properties or methods.
*/
User.prototype.__resolve = function(name)
{
	Log.store('User.__resolve('+name+')', Log.LEVEL_WARN);
}