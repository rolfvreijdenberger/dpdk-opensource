/**
* holds references to all the users in a shared object and another internal representation.
*/
load("data/SharedObjectAdapter.asc");

function Users(name, persistent)
{
	SharedObjectAdapter.apply(this, arguments);
	this.users = new Object();
}

Users.prototype = SharedObjectAdapter;
Users.constructor = Users;


/**
 * get a user by it's remoteId.
 * @param {Object} remoteId
 */
Users.prototype.getUserByRemoteId = function(remoteId){
	return this.users[remoteId];
}



/**
* adds a user to the users overview. 
*/
Users.prototype.add = function(user)
{
	this.list.setProperty(user.getRemoteId(), user.getRSOUser());
	this.users[user.getRemoteId()] = user;
	
}


/**
 * whenever a user is updated, somehow, this method should be called (normally via Client.update())
 * The user object itself should NOT be responsible for doing this.
 * So normally, the application logic will call this method to update the shared object and to store the latest data.
 * 
 * @param {Object} user
 */
Users.prototype.update = function(user)
{
	this.list.setProperty(user.getRemoteId(), user.getRSOUser());
}



/**
* removes a user from the users overview.
* 
* When a user is removed from the system, call user.destroy() after a call to users.remove(user)
*/
Users.prototype.remove = function(user)
{
	//remove from the list
	this.list.setProperty(user.getRemoteId(), null);
	//remove from the users lookup table
	this.users[user.getRemoteId()] = null;
	delete this.users[user.getRemoteId()];
}



/**
* totally destroys/removes all shit on this userlist
*/
Users.prototype.destroy = function ()
{
	//Log.output("Users.prototype.destroy");
	//super.destroy();
	this.users = null;
	this.list.clear();
}

