/*
 Copyright (c) 2008 De Pannekoek en De Kale B.V.,  www.dpdk.nl
 this file contains the default application calls via the "application" object.
 application handles connections, it's own lifetime (startup, midlife and shutdown) and is the main scope
 */
/*
 * all imports can be done here, no need to further import the files in seperate files (only in Model.asc), but this is also dependent on the order of the imports here...
 */
//netservices, used for remoting calls
load("netservices.asc");

//shared object and dataservice
load("data/SharedObjectAdapter.asc");
load("data/DataService.asc");

//remote data call handlers
load("data/DataHandler.asc");
load("data/LogHandler.asc");

//the client methods
load("utils/Client.asc");


//utils
load("utils/Log.asc");
load("utils/Debug.asc");
load("utils/DateUtils.asc");
load("utils/ArrayUtils.asc");
load("utils/KeepAlive.asc");
load("utils/ReferrerChecker.asc");
load("utils/IpChecker.asc");
load("utils/Validate.asc");
load("utils/RSOUtils.asc");
load("utils/RemoteId.asc");

//user stuff
load("user/User.asc");
load("user/Users.asc");

//application specific logic, start with your custom business logic here..
load("model/Model.asc");

/**
 * default handler for the startup of the logic.
 * fire up the application, done only once.
 */
application.onAppStart = function(){
	//debug output so you can see which version you're running :)
    application.VERSION = "0.1";
    Log.output("Application.onAppStart() version: " + application.VERSION, Log.LEVEL_STATUS, {
        name: application.name,
        server: application.server
    });
	
	//allow debugging sessions (look it up on google!)
    application.allowDebug = true;
    
    //create a new Model that might do stuff (add logic to Model in Model.asc)
	//Model is the basis for our business logic
    application.MODEL = new Model(2500);
    
}

/**
 * handles connection by flashclients.
 * @param	newClient	a reference to the connecting client via the Client object.
 */
application.onConnect = function(newClient){
    //make sure our business logic knows and does the right things with the newly connected client
	return application.MODEL.add(newClient);
}



/**
 * handles a disconnection by the client
 * @param	oldClient	a reference to the disconnecting client via the Client object
 */
application.onDisconnect = function(oldClient){
    //let our business logic do the right things
    application.MODEL.remove(oldClient);
    
    //do some housekeeping
    application.gc();
    return true;
}


/**
 * the app stops, housekeeping and cleaning
 * @param	info	info object containing shutdown reason
 */
application.onAppStop = function(info){
    Log.output("Application.onAppStop() version: " + application.VERSION);
    application.MODEL.destroy();
  
    application.gc();
    //return false to stop from shutting down, true otherwise
    return true;
}


/**
 * receives messages not caught by other handlers
 * @param	info	an info object containing status info
 */
application.onStatus = function(info){
    if (info.code != "NetConnection.Connect.Success") {
        Log.output("Application.onStatus(): " + info.code, Log.LEVEL_ERROR);
    }
}


/**
 * is called automagically when a property or method is called that does not exist
 * @param name the name of the method or property that does not exist
 */
application.__resolve = function(name){
    Log.output("Application.__resolve(" + name + ")", Log.LEVEL_ERROR);
}







