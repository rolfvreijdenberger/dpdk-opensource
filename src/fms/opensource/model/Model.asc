/**
 * This class should hold the application business logic and can load in other asc files.
 * As such, it is the entrance to your whole custom written code for a project and that code should be either here, or implemented in other classes in this 'model package'
 *
 *
 *
 * It also has methods in it for the User and Client classes via User.prototype and Client.prototype. etc.
 * This is the place to implement some hook methods that provide custom logic, defined on the User and Client objects, that are used by this mini framework.
 * 
 * 
 * Use RemoteId.getClientByRemoteId to get a direct reference to a specific client object to communicate with.
 * When using the nl.dpdk.services.fms.FMSService the remoteId is also available from that class in the flash client to get a reference to your fms 'remote' id.
 *
 */
/**
 * Model is the main mofo.
 * It is created once at startup of the fms and can be reached via application.MODEL
 * it is notified of connecting and disconnecting flash clients.
 *
 */
function Model(maximumConnectedUsers){
	//how many users are allowed to connect?
    this.maximumConnectedUsers = Validate.exists(maximumConnectedUsers) ? maximumConnectedUsers : 2500;
    //create a non persistent users shared object in the users directory.
    this.users = new Users("users/users", false);
    //pings all connected clients. if application.onDisconnect is not triggered (this is possible and a known bug) then this will remove a client that is offline.
    this.ping = new KeepAlive(15000, 4000);
    //referring domain access based control
    this.ref = new ReferrerChecker();
    //whitelisted domains
    this.ref.add("*");
    this.ref.add("http://www.dpdk.nl");
    this.ref.add("http://dpdk.nl");
	//ip access based control
	 this.ip = new IpChecker();
    //whitelisted ip's
    this.ip.add("*");
    
    
    //your implementation here...
}

/**
 * a new client has connected. do stuff with the client / user
 * This method is called in application.onConnect()
 * @param {Object} client
 */
Model.prototype.add = function(newClient){
    //your implementation here...
    
    //allow access depending on domain/referrer and ip, this makes it impossible for clients to get access to the fms if not validated, take a white list approach!
    if (!this.ip.check(newClient.ip)) {
        if (!this.ref.check(newClient.referrer)) {
            Log.output("Model.add(): connection rejected because of invalid domain/ip access. ip: " + newClient.ip + ", domain: " + newClient.referrer, Log.LEVEL_WARN, {
                ip_whitelist: this.ip.getAll(),
                referrer_whitelist: this.ref.getAll()
            });
            application.rejectConnection(newClient, {
                message: "invalid access!"
            });
            return false;
        }
    }
    
    //check if we are allowed to connect
    if (application.clients.length >= this.maximumConnectedUsers) {
        Log.output("Model.add(): connection rejected, the server is full.", Log.LEVEL_INFO, {
            active_connections: application.clients.length
        });
        application.rejectConnection(newClient, {
            message: "the server is full. Please try again later."
        });
        return false;
    }
    
    //accept first, this gives bugs if we don't do this first or do it implicitly by returning true
    application.acceptConnection(newClient);
    
    //add default read/write access
    newClient.writeAccess = "/";
    newClient.readAcces = "/";
    //make sure the client can be uniquely identified to the fms application, and therefore to other users
    new RemoteId(newClient);
    //store the user on a userlist
    this.users.add(new User(newClient));
    //inform the flash client of it's assigned id.
	//methods on the flash client start with 'receive' by (our) convention
    newClient.call("receiveRemoteId", null, newClient.getRemoteId());
    this.ping.add(newClient);
    
	
	//return true to notify application.onConnect
    return true;
    
}

/**
 * a client wants to disconnect. do stuff with the client/ user
 * This method is called in application.onDisconnect()
 * make sure our business logic knows, implement all cleanup logic for your specific model/user instance here..
 * @param {Object} client
 */
Model.prototype.remove = function(oldClient){

	//inside a try/catch block. We noticed, that when a connection is rejected, application.onDisconnect is still called when closing the flash player :S
    try {
        //remove from users list
        this.users.remove(oldClient.getUser());
        //now, destroy all references to this client and it's remoteId
        RemoteId.destroy(oldClient.getRemoteId());
        //destroy the old client (hook method implemented in client.destroy() for tweaking it to what you want to do with it.q	)
        oldClient.destroy();
    } 
    catch (e) {
        Log.output("Model.remove() " + e.message);
    }
    
    //this removes all pinging functionalities
    this.ping.remove(oldClient);
    
    
    //your implementation here...
}

/**
 * called via application.MODEL.update whenever a user's properties have been updated and the models needs to know.
 * the central update motherfucker
 * @param {Object} user
 */
Model.prototype.update = function(user){
    this.users.update(user);
}

/**
 * when the whole application stops, this method is called.
 * do your cleanup here, a hook for doing some final stuff
 */
Model.prototype.destroy = function(){
    this.ping.destroy();
	application.clearSharedObjects("/");
    application.clearStreams("/");
    //your implementation here...
}


/**
 * each time an update takes place from the application via user.update(), we can do some stuff here
 * user.update is needed when we want to update the userlist.
 * It will update the userlist with properties that come directly from a user object.
 * @see User.addToRSOUser
 */
User.prototype.onUpdate = function(){
    //your implementation here...

}

/**
 * hook method from Client.destroy()
 * The client will take care of cleaning up references that have been set via this framework.
 * do your custom cleanup here..
 * called from application.onDisconnect() as the final call from that routine.
 */
Client.prototype.onDestroy = function(){
    //your implementation here...
    //normally, state should be kept on a User object, so destroying stuff should take place on User.onDestroy.
}

/**
 * Hook method from User.destroy()
 * the User.destroy() method will take care of cleaning up stuff that has been set via this framework.
 * do your custom cleanup here, only for User, not for the attached client.
 * called before other stuff is called in User.destroy()
 */
User.prototype.onDestroy = function(){
    //your implementation here...
    //prevent memory leaks and cleanup references etc.
}

/**
 * hook method for User.getRSOUser.
 * we can use this method to add our own properties to the object placed on the userlist
 * @param {Object} rsoUser
 */
User.prototype.addToRSOUser = function(rsoUser){
    //your implementation here...
    //rsoUser.myProperty = this.getMyProperty();
}

